
var documents = [{
    "id": 0,
    "url": "https://solothought.com/404.html",
    "title": "404",
    "body": "404 Page does not exist!Please use the search bar at the top or visit our homepage! "
    }, {
    "id": 1,
    "url": "https://solothought.com/about",
    "title": "About",
    "body": "      Our site aims to provide comprehensive and insightful knowledge on a wide range of topics. Our articles are crafted to deliver information in a clear and concise manner, supported by real-life examples and illustrations. We strive to be a one-stop resource, including all relevant links, mind maps, decision trees, and other helpful materials, so you can save time and effort in your learning journey. Our goal is to enable you to understand the topic thoroughly without having to refer to multiple sources on the web, read lengthy articles or watch time-consuming videos.     Questions or Suggestions:     Do you have any suggestion about new topics or any question on existing one? Head over to our Discussions forum!               Support us    Your donation can help us be more creative and productive. Thank you for supporting us!     Paypal     Github       "
    }, {
    "id": 2,
    "url": "https://solothought.com/categories",
    "title": "Categories",
    "body": ""
    }, {
    "id": 3,
    "url": "https://solothought.com/",
    "title": "Home",
    "body": "      Featured:                                                                                                                                                                                                                                                                       Story of Kungfu Java Valley                :                 24 Jun 2023                                                                                                                                                                                                                                                                                                          Story of Kungfu Java Valley                                  :                 The story of the great masters of Java Valley who followed all the principle of OOPs and protected the Jade temple. :                 24 Jun 2023                                                                                                                                                                                                                                                                                                                              Fast XML Parser v4. 2 Features                :                 09 Apr 2023                                                                                                                                                                                                                                                                                                          Fast XML Parser v4. 2 Features                                  :                 Fast XML Parser was initially developed to support npm package Stubmatic which is used for the rapid development of mock web services. Now Fast XML. . . :                 09 Apr 2023                                                                                  All Stories:                                                                                                     Story of Kungfu Java Valley              :       The story of the great masters of Java Valley who followed all the principle of OOPs and protected the Jade temple. :                                                                               Amit                24 Jun 2023                                                                                                                                     Fast XML Parser v4. 2 Features              :       Fast XML Parser was initially developed to support npm package Stubmatic which is used for the rapid development of mock web services. Now Fast XML Parser has more than 9. . . :                                                                               Amit                09 Apr 2023                                                                                                                                     Setup Jekyll Vscode Dev Container              :       This is a quick guide to setup Jekyll environment for jekyll theme development or to write blog posts locally. You can download ready-to-use source-code from Github. :                                                                               Amit                02 Apr 2023                                                                                                                                     Make a Better SEO URL              :       URLs are an important factor in SEO, but many websites fall short when it comes to optimizing them for search engines. :                                                                               Amit                01 Apr 2023                                            "
    }, {
    "id": 4,
    "url": "https://solothought.com/privacypoicy",
    "title": "Privacy Policy",
    "body": "      We use Google Analytics to understand the traffic and interests of our visitors in order to provide you with the best content. We want to assure you that we do not track individual IP addresses but only the country or city name from where the traffic originates.     Please note that Google Analytics may also be used by third-party advertising providers to display relevant advertisements.   "
    }, {
    "id": 5,
    "url": "https://solothought.com/robots.txt",
    "title": "",
    "body": "      Sitemap: {{ “sitemap. xml”   absolute_url }}   "
    }, {
    "id": 6,
    "url": "https://solothought.com/tutorial/kungfu-java-concepts/",
    "title": "Story of Kungfu Java Valley",
    "body": "2023/06/24 - Once upon a time, in the mystical land of Java, there existed a wise and powerful creature known as Master Oogway. He was no ordinary being but an abstract class, revered as the commander and the master of all warriors, including Master Shifu. Each master possessed secret skills, represented by private skills and weapon, which were known only to them. However, there were certain skills that they were willing to share with those who aspired to follow in their footsteps. These special skills were protected and accessible only to their students. Master Oogway, being the epitome of tranquility, held the private skill of attaining inner calm. In addition, he entrusted Master Shifu with a protected skill, teaching him the art of saving the temple from any threat. Under Master Oogway’s guidance, Master Shifu honed his abilities and trained diligently, preparing to face any challenges that came his way. Each master possessed secret skills that were passed down through generations.  Master Oogway, with his deep understanding of the universe, had mastered the art of harnessing the power of chi. This secret skill allowed him to achieve a state of calmness and centeredness, even in the face of adversity. He kept this skill private, sharing it only with his most trusted students. On the other hand, Master Shifu, a disciplined and dedicated student, had developed his own secret skill. He had mastered the art of using pressure points in combat, enabling him to defeat opponents with precision and efficiency. This skill was protected and passed down only to his most promising students. 1234567891011121314151617181920212223242526abstract class Oogway {  private String Calmness; //skill  private String SoloThought; //skill  protected String PhoenixBlade;	abstract public void fight();}class Shifu extends Oogway {	private List&lt;String&gt; pressurePoints;	public void fight(){		System. out. println( Defeat with:   + pressurePoints);	}	public void fight(String level){		if(level. equals( final )) System. out. println( Using protected weapon:   + PhoenixBlade);	}}public class Main {  public static void main(String[] args) {    Shifu shifu = new Shifu();    shifu. fight();    shifu. fight( final );  }}In their world, the masters possessed a unique magic that allowed them to create virtual images, or instances, of themselves. These images were sent into battle to protect the village and its inhabitants. Any villager in need could request the masters to create an image and accompany them in their quest to safeguard the village. However, Master Shifu possessed some static skills like the ability to open the gate of the temple effortlessly. He doesn’t need any of his image to do the same.  To prevent malevolent warriors, such as the infamous Kai, from harnessing their powers, both Master Oogway and Master Shifu sealed their skills securely. They were well aware of the potential dangers that could arise if their knowledge fell into the wrong hands. Additionally, both masters were marked as Temple Savers, an honorable position signifying their commitment to protecting the sacred grounds. 123456789101112131415sealed class Oogway permits Shifu {  // properties and methods of Oogway class}sealed class Shifu permits Po, Tigress {  // properties and methods of Shifu class}class Po extends Shifu {  // properties and methods of Po class}class Tigress extends Shifu {  // properties and methods of Tigress class}Every Monday, villagers flocked to the temple seeking the guidance and training of the masters. Regardless of who was present, any master bearing the Village Trainer interface was capable of providing instruction. The training modules implemented polymorphism, not concerning themselves with the specific identity of the master. As long as they possessed the necessary qualifications, any master could impart their wisdom. Just like polymorphism, allowed different masters to train the villagers or other master who is recognized as trainee. 123456789101112131415161718192021222324252627282930313233abstract sealed class Oogway permits Shifu {  public void train() {    System. out. println( Oogway is training );  }}sealed class Shifu permits Po, Tigress implements Trainer{  public void train() {    System. out. println( Shifu is training );  }}interface Trainer {  default void train(Trainee trainee) {    trainee. train();  }}interface Trainee {}class Po extends Shifu implements Trainer, Trainee {}public class TrainingScheduler {	List&lt;Trainer&gt; trainers;	List&lt;Trainee&gt; trainees;	Map&lt;Trainer,Trainee&gt; schedule; 	public void schedule(){		//for each trainee in trainees		// pick a trainer from trainers randomly		// assign a trainer to trainee and save the schedule	}}One fateful day, a simple panda stumbled upon the temple. His eyes widened in awe as he spotted Master Shifu deep in meditation. The panda had long admired the master from afar and approached him with a humble request—to become a master like him. At first, Master Shifu hesitated, unsure if the panda had what it took to walk the path of a master. Yet, the panda’s unwavering determination and numerous attempts to convince him eventually persuaded Master Shifu to accept his request. He set one condition: the panda must become the final inheritor of his skills, unlike the non-sealed masters before him.  As the panda progressed in his training, he faced numerous challenges and obstacles. He had to prove his worthiness by going through intense combat sessions, mastering meditation techniques, and demonstrating his commitment to protecting the temple. Through his determination and hard work, the panda eventually became a master, inheriting the secret skills of Master Shifu.  Meanwhile, a powerful enemy threatened the village and the temple. The masters realized that they needed to train the villagers to defend themselves. The panda, now a master, took on the responsibility of training the villagers, using the skills he had learned from Master Shifu. The village united under the guidance of the masters and successfully defended their home. In the end, the temple remained a symbol of strength and resilience. The panda, now a respected master, continued to train future generations, passing down the ancient knowledge and skills that had been entrusted to him. This story showcases the importance of mentorship, dedication, and the power of perseverance. It highlights the concept of polymorphism, where different masters can train individuals as long as they possess the necessary skills and knowledge. It also emphasizes the significance of protecting valuable traditions and passing them down to future generations. ” As the panda continued his training under the guidance of Master Shifu, he learned about the concept of non-changeable skills and weapons, known as final. His images can use them as it is. Even the maters of Panda type can’t change how those weapons work. With the permission of Master Shifu, Po finally removed the final from his type so he can make masters of his type. 1234567class Po extends Shifu {  final String secretSauce =  AX87DF89E3 ;  final void momoBlast() {    System. out. println( Fire the momo blast! );  }}During one eventful day, Master Shifu presented a final green-stone to the panda. This unique stone possessed a special power to freeze the enemy power for sometime. Intrigued, the panda decided to create a “green-stone” of his own to experiment and develop a new weapon similar to the one Master Shifu possessed. However, an unexpected interruption occurred when some villagers approached the panda, requesting his assistance in fighting against their enemies. Unfortunately, the panda forgot to remove the weapon he had recently created and inadvertently shared his image with the villagers.  Though villagers somehow won the fight, he got to know that “great-stone” didn’t work at all. He was surprised as Master Shifu himself shown his power to him. He went to the Master Shifu to know why it failed in the war field. 1234567891011121314151617class Shifu {  //Uncomment any line you want, output will not change  protected final String greenStone =  green-stone ;  // protected String greenStone =  green-stone ;  // final String greenStone =  green-stone ;}class Po extends Shifu {  String greenStone =  po-green-stone ;}public class Main {  public static void main(String[] args) {    Po po = new Po();    System. out. println(po. greenStone); // po-green-stone  }}Master Shifu used a metaphor to explain this concept. He said, “Imagine that our final weapons are like two lanterns shining their light. When we have the same name for our weapons, it’s like placing one lantern directly in front of the other. The light from the first lantern will be hidden, and only the light from the second lantern will be visible. ”. He immediately realised his mistake of not erasing the weapon he created just for experiment before making sharing his image with the villagers. Master Shifu advised the panda to choose a different name for his weapon to prevent any conflicts. He named it “light-green-stone”. Both clutched their stomachs and erupted in laughter, seemingly oblivious to anyone observing them.  No matter what speciality your master had. If you have something that your master also had, people will see you first. Because you’re concrete.  The Palace managed by Master Shifu can be considered as a Java microservice. It is the only palace on the Jade mountain and functions independently without being dependent on other temples. The Palace serves as a self-contained unit, providing specific services to its visitors. To manage the increasing workload of the Temple, a new library is created as a sub-unit or module within the Palace. The library operates as an independent entity, handling specific tasks and responsibilities. Despite being a part of the Temple, the library has its own separate functionality and can be accessed and utilized by villagers and other module of the palace independently. In the context of Java, modules are a way to organize and encapsulate code. They allow for the separation of concerns and provide a modular structure to the application. Each module can have its own set of functionalities and dependencies. It provides a clear boundary for code ownership and enables different teams to work on different modules independently. A module can be considered as an independent microservice who is tightly coupled with a service but can work independently. A module can also be created when a micro-service is utilize the same resources and technology stack and has some meaning to be the part of same project.  ⚠️ Warning  In this article, inheritance is considered as a `type` relationship not as  parent-child  relationship. Think in this way, Human class is inherited by Superman class. But Superman is not the child of the human but it is the type of Human. In the next article, I’ll explain you all the Java concepts covered in this article. So bookmark this article. Have any thought to improve this article, correct the concepts, cover more concepts? Then share your thoughts. "
    }, {
    "id": 7,
    "url": "https://solothought.com/tutorial/fast-xml-parser-4.2-features/",
    "title": "Fast XML Parser v4.2 Features",
    "body": "2023/04/09 - Fast XML Parser was initially developed to support npm package Stubmatic which is used for the rapid development of mock web services. Now Fast XML Parser has more than 9 million weekly downloads and approximately half a million projects on GitHub are using it including Microsoft, IBM, AWS, and many other big companies. In this post, we’ll talk about new features launched in V4. 1. 4 and v4. 2. 0  📌 Info  Use `oneListGroup` property to guide builder not to generate separate parent tag for each child of a list. Use `updateTag` method with parer to update attrbutes name, attributes values, and tag name. You can also skip a tag from parsing result. oneListGroup for XML builder: Ideally there is no group needed in XML for repetitive tags. But having it may make more sense to understand the data. 1234567891011121314151617Addresses: [  {    Address: {      line1:         line2:         line3:         city&gt;:       }  },{    Address: {      line1:         line2:         line3:         city&gt;:       }  }]XML Builder was previously enclosing each Address in Addresses tag separately before v4. 1. 4. Now, if you set oneListGroup: true as an option to Builder it makes only one group same as in the above JSON. 12345const builder = new XMLBuilder({    oneListGroup: true ,    format: true  });const result = builder. build(jObj);Output 1234567891011121314&lt;Addresses&gt;  &lt;Address&gt;    &lt;line1&gt;&lt;/line1&gt;    &lt;line2&gt;&lt;/line2&gt;    &lt;line3&gt;&lt;/line3&gt;    &lt;city&gt;&lt;/city&gt;  &lt;/Address&gt;  &lt;Address&gt;    &lt;line1&gt;&lt;/line1&gt;    &lt;line2&gt;&lt;/line2&gt;    &lt;line3&gt;&lt;/line3&gt;    &lt;city&gt;&lt;/city&gt;  &lt;/Address&gt;&lt;/Addresses&gt;Change Attributes:     Note: This feature is currently added to the XML parser only. Sometimes incoming XML doesn’t fit to our expectations. We may want to skip a few attributes of a tag from the parsing result. Sometimes we want to aggregate all the attributes in one or just change the value or name of some attributes. updateTag method in parser’s option gives the independency to manage attributes in your way. Input 1234567&lt;root&gt;  &lt;a keep= me  skip= me &gt;&lt;/a&gt;  &lt;a skip= me &gt;&lt;/a&gt;  &lt;a need= friend &gt;&lt;/a&gt;  &lt;a camel= case  MakeMe= lower &gt;&lt;/a&gt;  &lt;b change= val &gt;&lt;/b&gt;&lt;/root&gt;Code 12345678910111213141516171819202122232425const options = {  attributeNamePrefix:   ,  ignoreAttributes:  false,  updateTag(tagName, jPath, attrs){    if(attrs[ skip ]) delete attrs[ skip ]    if(attrs[ camel ]) {      attrs[ Camel ] = attrs[ camel ];      delete attrs[ camel ];    }    if(attrs[ need ]) {      attrs[ friend ] =  me ;    }    if(attrs[ MakeMe ]) {      attrs[ makeme ] = attrs[ MakeMe ];      delete attrs[ MakeMe ];    }    if(attrs[ change ]) {      attrs[ change ] = attrs[ change ]. toUpperCase();    }    return tagName;  }};const parser = new XMLParser(options);let result = parser. parse(xmlData);Output 123456789101112131415161718192021{   root : {     a : [      {         keep :  me       },        ,      {         need :  friend ,         friend :  me       },      {         Camel :  case ,         makeme :  lower       }    ],     b : {       change :  VAL     }  }}    Note: Please remember that `ignoreAttributes: false` is setChange Tag name or skip a tag: Though updateTag doesn’t give you full control to manage tag but you can change tag name or skip a tag from the parsing result. Suppose, you’re parsing a HTML document and want to skip all the script tags or you want to change the name of a tag when it is not properly formatted. You may also conditionally skip a tag like to skip img tag for big images. Input 1234567891011121314&lt;html&gt;  &lt;header&gt;&lt;/header&gt;  &lt;body&gt;    &lt;h1 class= highlight  &gt;Post title&lt;/h1&gt;    &lt;content&gt;      &lt;img width= 200  height= 500 &gt;      &lt;p&gt;some text&lt;/p&gt;      &lt;img width= 200  height= 200 &gt;      &lt;p join= a  all= b  in= c  one= d  &gt;some text 2&lt;/p&gt;      &lt;img width= 500  height= 500 &gt;    &lt;/content&gt;    &lt;script&gt;&lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;Code 123456789101112131415161718192021222324252627const options = {  ignoreAttributes: false,  attributeNamePrefix:   ,  updateTag: function(tagname, jPath, attrs){        if(tagname === h1  &amp;&amp; attrs[ class ] &amp;&amp; attrs[ class ]. indexOf( highlight ) &gt; -1){      attrs[ class ] +=   underline     }else if(attrs[ join ]){      let val =   ;      Object. keys(attrs). forEach( a =&gt; {        val+= attrs[a]        delete attrs[a];      });      attrs[ joint ] = val;    }    if(tagname ===  script ) return false;    else if(tagname ===  img ){      if(attrs. width &gt; 200 || attrs. height &gt; 200) return false;    }else if(tagname ===  content ){      return  div     }    return tagname;  },  unpairedTags: [ img ]};const parser = new XMLParser(options);let result = parser. parse(xmlData);Output 123456789101112131415161718192021222324{   html : {     header :   ,     body : {       h1 : {         #text :  Post title ,         class :  highlight underline       },       div : {         p : [           some text ,          {             #text :  some text 2 ,             joint :  abcd           }        ],         img : {           width :  200 ,           height :  200         }      }    }  }}"
    }, {
    "id": 8,
    "url": "https://solothought.com/tutorial/setup-jekyll-vscode-container/",
    "title": "Setup Jekyll Vscode Dev Container",
    "body": "2023/04/02 - This is a quick guide to setup Jekyll environment for jekyll theme development or to write blog posts locally. You can download ready-to-use source-code from Github.     1Setup your machine  Please ensure that following dependencies are present on your machine      Docker   Git   Vscode with following extensions         Dev containers     Remote Development     Remote Explorer     Remote Tunnels              2Jekyll Dev container  Clone jekyll dev-container repository or download it from Github.   1$ git clone git@github. com:solothought/jekyll-vscode-devcontainer. git solothought-jekyll-vscode-devcontainer    Click on green icon in left-bottom corner of vscode &gt; select Reopen in Container. It will be download and install some necessary packages on first run.   Go to view menu &gt; Select Terminal option. Or Ctrl+`. This will open Terminal inside the jekyll ontainer. You’ll see 2 ports open. But you can’t still open the site as no theme is generated or set yet.   Click on + icon to create a new theme or to explore what is inside the container.   Here, you can run jekyll commands      jekyll clean   jekyll new   jekyll build   jekyll serve       3Jekyll Theme  You can create a base theme your own or download a theme of your choice.   123456789101112131415vscode ➜ /workspaces/solothought-jekyll-vscode-devcontainer (main) $ jekyll new solothoughtRunning bundle install in /workspaces/solothought-jekyll-vscode-devcontainer/solothought. . .  Bundler: Fetching gem metadata from https://rubygems. org/. . . . . . . . . . . .  Bundler: Resolving dependencies. . .  Bundler: Using public_suffix 5. 0. 1 Bundler: Using bundler 2. 4. 7 Bundler: Using colorator 1. 1. 0 Bundler: Using concurrent-ruby 1. 2. 2 Bundler: Using eventmachine 1. 2. 7 Bundler: Using ffi 1. 15. 5 . . .  Bundler: Bundle complete! 7 Gemfile dependencies, 33 gems now installed.  Bundler: Use `bundle info [gemname]` to see where a bundled gem is installed. New jekyll site installed in /workspaces/solothought-jekyll-vscode-devcontainer/solothought. vscode ➜ /workspaces/solothought-jekyll-vscode-devcontainer (main) $    This will create a theme folder solothought in project directory.   123456789101112  . . .   ├── . devcontainer  ├── . vscode  ├── solothought    └── _posts    └── _drafts    └── _site    └── _config. yml    └── 404. html    └── Gemfile    └── Gemfile. lock    └── index. markdown    Go inside the folder and build it.   1234567vscode ➜ /workspaces/solothought-jekyll-vscode-devcontainer (main) $ cd solothought/vscode ➜ /workspaces/solothought-jekyll-vscode-devcontainer/solothought (main) $ jekyll serve. . .           done in 0. 431 seconds. Auto-regeneration: enabled for '/workspaces/solothought-jekyll-vscode-devcontainer/solothought'  Server address: http://127. 0. 0. 1:4000/ Server running. . . press ctrl-c to stop.     Open http://127. 0. 0. 1:4000/ in the browser to check how it look.      Note: If you're downloading a theme from somewhere else then delete `Gemfile. lock` file before building theme as it might be pointing to some old dependenciesInstead of typing a command manually, you can also run vscode task. Go to Terminal &gt; Run Task &gt; Select the relevant task. You can find all the tasks in . vscode\tasks. json. Since, we have genrated the theme in a different folder instead of project root, you’ll have to uncomment cwd option in tasks. json so the Jekyll commands run from the correct directory. 123456789101112{   label :  Serve ,   type :  shell ,   command :  bundle exec jekyll serve --livereload ,   group : {     kind :  test   },  //  options : {  //    cwd :  ${workspaceFolder}/solothought   // },   isBackground : true,}"
    }, {
    "id": 9,
    "url": "https://solothought.com/tutorial/better-seo-url/",
    "title": "Make a Better SEO URL",
    "body": "2023/04/01 - URLs are an important factor in SEO, but many websites fall short when it comes to optimizing them for search engines. This post will explain all the variables that can affect your site’s searchability as a result of a poor URL.    No Special Characters: Processing issues can arise when a URL contains special characters or Unicode other than numerals, English alphabets, and hyphens. Because an emoji can be used in many different contexts and cannot be typed from a keyboard, a URL containing one may not appear in search engine results. Any other character which has no textual sense but is used to just decorate a post title, like [,],(,) should be avoided. Characters like @, #, &amp;, ` `(space) can cause issues to interpret a URL.     Don’t change it: We improve post contents multiple times to make them updated with the latest information or to correct errors. It may lead to a change in the post title hence the URL. If a post URL is very specific, it is a higher chance to get modified in the future. For instance, if you write about “Top 3 Sites for Typography” and found a more after few months then you may want to update the same article than write a new one. The title may change to “Top 4 sites for Typography”.   URLs can be bookmarked in browsers, cached by search engines, and referred by other sites. Sometimes you even share it on social media platforms. If the URL gets changed, it’ll result in broken links.    All hates long URL: Whether it is a search engine or a social media platform, all shorten the long URLs. Either they are replaced with another URL with some random string or cut some part to make them unreadable.     Dates can make your post old: Once you publish an article with the date in URLs, you don’t change the publish date when you update the content. Otherwise, any change in the URL will result in broken links. Many of us used to search for the latest content. So the URLs with older dates are automatically filtered out even if they’re recently updated.    Post URL ≠ Post Title: An attractive post title may increase traffic to the site. But a post URL is just a link referred by search engines and other sites. It should be short with necessary SEO friendly keywords without page extensions or propositions.      Post URL ≠ Post Title      Hierarchy: It’s difficult to manage if all the posts are stored in the top folder of a blog, especially for static sites. On the other hand, it is also not a good practice if they’re deeply nested.   https://solothought. com/tutorials/make-better-seo-url  https://solothought. com/tutorials/Web/SEO/make-better-seo-url  https://solothought. com/tutorials/make-better-seo-url  You can control it by setting paramlink in jekyll, wordpress, or other frameworks.  Spam Words: URLs having keywords related to money, deals, freebies, and offers Or the URL who are creating urgency or pressure, are generally considered spam. Many search engines filter out such URLs.   https://solothought. com/a-free-tip-for-seo-url  https://solothought. com/an-urgent-advice-for-seo-url  https://solothought. com/free-copy-of-premium-ebook-on-seo-urls  "
    }];

var idx = lunr(function () {
    this.ref('id')
    this.field('title')
    this.field('body')

    documents.forEach(function (doc) {
        this.add(doc)
    }, this)
});
function lunr_search(term) {
    document.getElementById('lunrsearchresults').innerHTML = '<ul></ul>';
    if(term) {
        document.getElementById('lunrsearchresults').innerHTML = "<p>Search results for '" + term + "'</p>" + document.getElementById('lunrsearchresults').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>No results found...</li>";
        }
    }
    return false;
}

function lunr_search(term) {
    $('#lunrsearchresults').show( 400 );
    $( "body" ).addClass( "modal-open" );
    
    document.getElementById('lunrsearchresults').innerHTML = '<div id="resultsmodal" class="modal fade show d-block"  tabindex="-1" role="dialog" aria-labelledby="resultsmodal"> <div class="modal-dialog shadow-lg" role="document"> <div class="modal-content"> <div class="modal-header" id="modtit"> <button type="button" class="close" id="btnx" data-dismiss="modal" aria-label="Close"> &times; </button> </div> <div class="modal-body"> <ul class="mb-0"> </ul>    </div> <div class="modal-footer"><button id="btnx" type="button" class="btn btn-danger btn-sm" data-dismiss="modal">Close</button></div></div> </div></div>';
    if(term) {
        document.getElementById('modtit').innerHTML = "<h5 class='modal-title'>Search results for '" + term + "'</h5>" + document.getElementById('modtit').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><small><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></small></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>Sorry, no results found. Close & try a different search!</li>";
        }
    }
    return false;
}
    
$(function() {
    $("#lunrsearchresults").on('click', '#btnx', function () {
        $('#lunrsearchresults').hide( 5 );
        $( "body" ).removeClass( "modal-open" );
    });
});