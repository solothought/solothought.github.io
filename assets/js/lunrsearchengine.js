
var documents = [{
    "id": 0,
    "url": "https://solothought.com/404.html",
    "title": "404",
    "body": "404 Page does not exist!Please use the search bar at the top or visit our homepage! "
    }, {
    "id": 1,
    "url": "https://solothought.com/about",
    "title": "About",
    "body": "      Our site aims to provide comprehensive and insightful knowledge on a wide range of topics. Our articles are crafted to deliver information in a clear and concise manner, supported by real-life examples and illustrations. We strive to be a one-stop resource, including all relevant links, mind maps, decision trees, and other helpful materials, so you can save time and effort in your learning journey. Our goal is to enable you to understand the topic thoroughly without having to refer to multiple sources on the web, read lengthy articles or watch time-consuming videos.     Opensource projects:         Here is the list of top opensource projects with downloads in last 3-4 years. Some projects are not that old and never advertised on social platforms. Hence, their downloads must be lesser. Additionally, some projects like imglab, and match-it are not in the list as they're online apps but still popular. (22 Nov 2023)                       package       downloads                   fast-xml-parser       863,399,428                   strnum       447,873,322                   nimnjs       4,986,108                   fastify-xml-body-parser              220,938                   fast-lorem-ipsum       135,407                   stubmatic       66,265                   detailed-xml-validator              10,699                               Some users who rely on our work:                                                                                                                                              Support us        Your donation can help us be more creative and productive. Thank you for supporting us!         Paypal         Github                     Notification        Subscribe to be notified for new thoughts published on this platform. We don't send any offer or unnecessary emails that waste your time.                                Get new posts by email:                        Subscribe                          You can also subscribe to the RSS feed for updates.                     Questions or Suggestions        Do you have any suggestion about new topics or any question on existing one? Head over to our Discussions forum!             "
    }, {
    "id": 2,
    "url": "https://solothought.com/categories",
    "title": "Categories",
    "body": ""
    }, {
    "id": 3,
    "url": "https://solothought.com/",
    "title": "Home",
    "body": "      Featured:                                                                                                                                                                                                                                                                                                               Break the Chains: Women’s Defiance Against Blackmail and Exploitation                :                 06 May 2025                                                                                                                                                                                                                                                                                                          Break the Chains: Women’s Defiance Against Blackmail and Exploitation                                  :                 You can stop it . . . :                 06 May 2025                                                                                                                                                                                                                                                                                                                                                                                                                                          Introducing Text2Chart: Transform Text into Interactive Diagrams                :                 10 Nov 2024                                                                                                                                                                                                                                                                                                          Introducing Text2Chart: Transform Text into Interactive Diagrams                                  :                 Create an interactive flow chart from algorithm like text. Embed on any webpage in just one line. :                 10 Nov 2024                                                                                                                                                                                                                                                                                                                                                                                                                                          The Power Glasses                :                 02 Mar 2024                                                                                                                                                                                                                                                                                                          The Power Glasses                                  :                 The world is full of your imagination:                 02 Marhapter 2: The Preparation of Battle                :                 29 Jun 2023                                                                                                                                                                                                                                                                                                          Chapter 2: The Preparation of Battle                                  :                 The Java valley is always under the threat. So all the masters must be prepared all the time. :                 29 Jun 2023                                                                                                                                                                                                                                                                                          Flowgger:                       Flowgger reduces the logs size and logs debugging time by up to 90%.                                                                             All Stories:                                                                                                     Break the Chains: Women’s Defiance Against Blackmail and Exploitation              :       You can stop it . . . :                                                                               Amit                06 May 2025                                                                                                                                                 Unsettled Thoughts: The Silent Struggles of Women              :       A small change can change the world . . . :                                                                               Amit                18 Feb 2025                                  Read inntroducing Text2Chart: Transform Text into Interactive Diagrams              :       Create an interactive flow chart from algorithm like text. Embed on any webpage in just one line. :                                                                               Amit                10 Nov 2024                                                                                                                                                 मज़बूत कंधे              :       When I seen a kid selling some stuff on a footpath and struggling in life, I couldn't stop myself writing this . . . :                                                                               Amit                07 Sep 2024                                                                                                                                                 बारिश का रंग              :       Yesterday, inspired by a friend's request and the melancholic weather, I attempted to capture the emotions of a . . . :                                                                               Amit                10 Jun 2024                                                                                                                                                 The Power Glasses              :       The world is full of your imagination:                                                                               Amit                02 Mar 2024                                                           &laquo; Prev       1        2        3        4      Next &raquo; "
    }, {
    "id": 4,
    "url": "https://solothought.com/links",
    "title": "Links",
    "body": "There are many people around the world who is giving their hard effort and pricelsss time to create contents which are easily understandable, visual, and interactive. Here, we’re mentioning whatever we come across. Sometimes, due to maintenace overhead some site goes down. If you hold such contents, you can reserve a page on this site for free. If you get to know some contents that you really liked then you can suggest us to list it here. Academic:  Periodic Table: Interactive. Select an element to get more information about the element. It would be better if the images of the element are also there and what if there is guess game!! Programming:  "
    }, {
    "id": 5,
    "url": "https://solothought.com/privacypoicy",
    "title": "Privacy Policy",
    "body": "Privacy Policy      We use Google Analytics to understand the traffic and interests of our visitors in order to provide you with the best content. We want to assure you that we do not track individual IP addresses but only the country or city name from where the traffic originates.     Please note that Google Analytics may also be used by third-party advertising providers to display relevant advertisements.   Solothought Privacy Policy Introduction Solothought respects your privacy and is committed to protecting your personal information. This Privacy Policy explains how we collect, use, and share your personal information when you visit our website, solothought. com. What Personal Information Do We Collect? We collect the following personal information from you when you visit our website through the analytics:  Your Google Analytics data: We use Google Analytics to collect information about how you use our website. This information includes, but is not limited to, the pages you visit, the links you click, and the time you spend on our website. How Do We Use Your Personal Information? We use your personal information collected from analytics to improve the site contents and layout. Who Do We Share Your Personal Information With? We may share your personal information with the following third parties:  Google Analytics &amp; Adsense: We use Google Analytics to collect information about how you use our website. Google Analytics may share this information with us. How Do We Protect Your Personal Information? We take steps to protect your personal information, including:  We are maintaining the static website. Hence, your personal information doesn’t transfer to any of our server or stored on any server hold by us. Your Rights Since, we don’t store your information directly to our servers, we can’t provide it back or delete it. However, if you’re not comfortable with analytics we use, you can always disable them using browser plugins. How to Contact Us If you have any questions about this Privacy Policy, please contact us at our email or dashboard. Changes to This Privacy Policy We may update this Privacy Policy from time to time. We will notify you of any changes by posting the new Privacy Policy on our website. The new Privacy Policy will be effective as soon as it is posted on our website. Thank you for visiting solothought. com! "
    }, {
    "id": 6,
    "url": "https://solothought.com/termandconditions",
    "title": "Term and Conditions",
    "body": "Term and ConditionsTerms and Conditions for Solothought. com Effective Date: 1st Apr 2023 Welcome to SoloThought. com! These Terms and Conditions (“Terms”) govern your use of our website and any services or content provided through the website. By accessing or using SoloThought. com, you agree to be bound by these Terms. If you do not agree with any part of these Terms, please do not use our website.    Use of Paid Content SoloThought. com hosts source code, high definition media, media source files, documents on various sources for paid users. The paid content available on our website is strictly for personal use only. It must not be used for any commercial purposes, shared, or published on any other site where it can be accessed by other users.   User Conduct When using SoloThought. com, you agree to abide by the following guidelines:     Do not post or share anything offensive, illegal, or prohibited on our public forums.    Respect the rights and privacy of others.    Do not engage in any activity that may harm or disrupt the functioning of our website or its users.       Reporting Vulnerabilities If you discover any vulnerabilities or security issues on SoloThought. com, we appreciate your cooperation in reporting them. Please report any vulnerabilities through GitHub Advisory or via e-mail.   Copyright and Content Usage     Users are prohibited from republishing the content on SoloThought. com under their own name or claiming ownership of the copyrighted images.    Modifying copyrighted images or removing the SoloThought. com branding is strictly prohibited.       Changes to Terms and Conditions SoloThought. com reserves the right to modify or update these Terms and Conditions at any time without prior notice. We encourage you to review these Terms periodically to stay informed of any changes.     Disclaimer/Limitation of Liability While SoloThought. com strives to provide accurate and up-to-date information, we do not guarantee the completeness, accuracy, or reliability of any content on our website. By using SoloThought. com, you acknowledge and accept that any reliance on the information provided is at your own risk. SoloThought. com shall not be held liable for any damages incurred as a result of your use of our website.   Governing Law These Terms and Conditions shall be governed by and construed in accordance with the laws of Government of India. By using SoloThought. com, you agree to comply with these Terms and Conditions. If you do not agree with any part of these Terms, please refrain from using our website. If you have any questions or concerns regarding these Terms, please contact us at Discussion forum. "
    }, {
    "id": 7,
    "url": "https://solothought.com/robots.txt",
    "title": "",
    "body": "      Sitemap: {{ “sitemap. xml”   absolute_url }}   "
    }, {
    "id": 8,
    "url": "https://solothought.com/page2/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:                       {% for post in site. posts %}                {% if post. featured == true %}                  {% include featuredbox. html %}                {% endif %}              {% endfor %}                                              Flowgger:                       Flowgger reduces the logs size and logs debugging time by up to 90%.                                                                       {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 9,
    "url": "https://solothought.com/page3/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:                       {% for post in site. posts %}                {% if post. featured == true %}                  {% include featuredbox. html %}                {% endif %}              {% endfor %}                                              Flowgger:                       Flowgger reduces the logs size and logs debugging time by up to 90%.                                                                       {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 10,
    "url": "https://solothought.com/page4/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:                       {% for post in site. posts %}                {% if post. featured == true %}                  {% include featuredbox. html %}                {% endif %}              {% endfor %}                                              Flowgger:                       Flowgger reduces the logs size and logs debugging time by up to 90%.                                                                       {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 11,
    "url": "https://solothought.com/rethink/break_the_chains_of_blackmail/",
    "title": "Break the Chains: Women’s Defiance Against Blackmail and Exploitation",
    "body": "2025/05/06 - Are we living in a world designed by men alone? From dawn to dusk, women are expected to care, please, and conform. We hide because they demand it. We suffer if we resist, and we’re blackmailed if we comply. Our bodies, their rules. Our feelings, their control. But enough is enough. This is a wake-up call for every girl, every woman, to stop negotiating with predators, to refuse to be silenced, and to reclaim your power. Blackmail and exploitation thrive in the shadows of fear—let’s drag them into the light. The Predator’s Web: Stories of Betrayal and Blackmail: Blackmail is a global plague, ensnaring women through deception and fear. These real cases expose the depths of this cruelty and the urgent need to fight back.  The Kerala Story: Deception in Disguise: The Kerala Story (2023), rooted in real events, depicts young women in Kerala ensnared by predators posing as lovers or friends. These men built trust, only to manipulate their victims into compromising situations—some recorded intimate moments, others coerced women into religious conversion or extremist groups. What began as a seemingly innocent connection spread into a web of control, with victims blackmailed into silence or compliance. The film’s controversy doesn’t erase its truth: predators exploit trust to trap women. Ajmer 1992: A City’s Shame: In 1992, Ajmer, Rajasthan, was scarred by a horrifying scandal. Farooq and Nafis Chishty, linked to the Ajmer Sharif Dargah, orchestrated a scheme targeting schoolgirls. They befriended one girl, coerced her into compromising photos, and used these to blackmail her into luring friends to a farmhouse. There, dozens of girls, some minors, were gang-raped and silenced with threats of exposure. The scandal erupted when a newspaper broke the story, leading to arrests, but the trauma lingered, a stark reminder of how power and blackmail devastate lives. Bhopal 2025: A Modern Echo: In April 2025, Bhopal, India, faced a chilling case reminiscent of Ajmer. A gang targeted female engineering students, using fake identities to gain trust. They assaulted the girls, recorded the acts, and blackmailed them with the videos to coerce religious conversions or further exploitation. Vulnerable victims, including orphans, dropped out of school, living in terror. Social media outrage exposed the network, revealing how technology amplifies predators’ reach. South Korea’s Nth Room: Digital Slavery: Between 2018 and 2020, South Korea was rocked by the “Nth Room” case, a cybersex trafficking scandal on Telegram. Operators like Moon Hyung-wook (“God God”) and Cho Ju-bin (“Doctor”) lured women and girls with fake job offers, such as modeling gigs. They coerced victims into sending explicit photos, then blackmailed them with threats to leak the content to family or schools. Victims, including 26 minors among at least 103 confirmed cases, were forced into degrading acts, some involving self-mutilation or rape, shared in chatrooms with up to 60,000 users paying up to $1,200 in cryptocurrency for access. The case, exposed by journalists and students, led to Cho’s 40-year sentence and sparked legal reforms, but the scars remain. Telegram’s Dark Underbelly: Telegram channels worldwide have become hubs for exploitation, with groups sharing non-consensual explicit content, often obtained through blackmail. In 2024, South Korea uncovered chatrooms with over 220,000 members using AI bots to generate deepfake porn for as little as $1. 50, targeting schoolgirls and university students. Perpetrators lure victims with fake job offers, then threaten to expose compromising material. The anonymity of Telegram, coupled with cryptocurrency payments, shields criminals, leaving victims to battle endless trauma as their images circulate. Malayalam Film Industry: The HEMA Committee Revelations: The Hema Committee scandal in the Malayalam cinema industry surfaced due to a confluence of events, primarily triggered by the sexual assault of a prominent female actor in February 2017. She was abducted and sexually assaulted while traveling to a shoot. The perpetrators allegedly filmed the assault. The motive behind filming the assault was reportedly to blackmail the actress. The HEMA Committee report exposed systemic exploitation in the Malayalam film industry. Actresses and crew faced coercion, with predators demanding sexual favors for roles. Those who refused were threatened with leaked photos or videos, ruining careers. The report, sparked by years of silence, revealed how power dynamics enabled blackmail. Victims hid their pain, fearing stigma, while the industry ignored their cries. The Heart of a Victim: A Pain That Screams in Silence: Imagine being a young girl, full of dreams, when a trusted friend or lover betrays you. They record a moment you thought was private, and suddenly, your world collapses. The phone buzzes with a message: “Do what I say, or everyone sees this. ” Your heart races, your palms sweat, and a suffocating fear grips you. You can’t eat, can’t sleep. Every knock on the door feels like exposure. You want to scream, but who will believe you? Society whispers: “You must have done something to deserve this. ” The shame burns like acid. You hide because the world judges a woman’s worth by her “purity. ” You feel dirty, worthless, as if your body no longer belongs to you. You replay every moment, blaming yourself: Why did I trust him? Why didn’t I see it? The predator’s voice echoes in your mind, threatening to destroy your family, your future. You shrink, withdraw, and bury your pain, because speaking out feels like inviting more shame. You’re trapped in a cage of fear, and the key is in the hands of someone who thrives on your silence. This is the reality for countless women. Their pain is a silent scream, their strength eroded by a world that demands they stay quiet. But silence is the predator’s greatest weapon. Men’s World, Men’s Rules: A System Built to Protect Predators: For centuries, society has been shaped by men, crafting rules that protect their power and freedom while binding women to silence and shame. You’ve been told to hide your identity, to guard your reputation, to conform to standards that punish nonconformity—standards that let men roam free while you face scrutiny. Are you weak, or have you been made to feel weak, conditioned by a system designed to favor predators? Blackmailers thrive on this imbalance, exploiting women’s fear of societal judgment. It’s time to reject these chains. By refusing to negotiate with predators, you can dismantle their power and reclaim your strength. The rules of society—its laws, norms, and expectations—have historically been written by men, for men. This male-centric framework often shields predators while leaving women vulnerable.  Until the late 20th century, many legal systems dismissed women’s claims of harassment or assault unless corroborated by male witnesses. For example, in the U. S. , marital rape wasn’t criminalized in all states until 1993. Still, most countries around the world do not criminalize marital rape.  As per the book Her Story By Nikita Thakur, women were banned by Mughal emperor to go out alone. Though there were many rules were made to protect women and the need of that time, they were supposed to be amended with time. And what these rules prove, protecting the women from so called filthy thoughts of a men. Such rules are not just the past. Taliban has recently imposed these rules in Afghanistan. Women are kept away from the basic human rights i. e. education.  A 2019 study by the Journal of Social Issues found that women face harsher social penalties for defying gender norms—such as speaking out or dressing freely—than men, who are rarely scrutinized for similar choices. This scrutiny fuels blackmailers, who weaponize women’s fear of shame. Men hold disproportionate economic power, controlling 85% of corporate board seats globally (2023, Fortune). This imbalance limits women’s access to resources like legal aid or security, making them easier targets for exploitation. Predators exploit this gap, knowing women may lack the means to fight back. The Solution: Refuse to Negotiate: We cannot undo the past, but we can shape the future. The solution is clear:      Never Negotiate with Predators     History proves that standing firm defeats evil. Blackmailers crave control. Compliance feeds their ego, emboldening them to strike again. Refusing to negotiate starves their power. Psychological studies show that consistent resistance deters criminals—they abandon targets when rewards are unattainable. By standing unyielding, women can break the cycle of exploitation, making predators fear their defiance.  More Victories Through Non-Negotiation:  U. S. Hijacking Crackdown: In the 1970s, plane hijackings surged, with criminals demanding ransoms. The U. S. ’s no-negotiation policy—no payments, no deals—cut domestic hijackings by 70% by the 1980s (FBI data). No payoff, no crime.  Colombia’s Kidnapping Crackdown: In the 2000s, Colombia’s no-ransom policy for kidnappings, paired with military action, slashed kidnapping rates. Criminals, denied profit, moved on.  WannaCry Ransomware: In 2017, companies that refused to pay cybercriminals during the WannaCry attack recovered faster. The lack of payouts discouraged future attacks.  MeToo’s Defiance: The #MeToo movement, sparked by women like Tarana Burke, proves the power of refusing silence. By rejecting secrecy, survivors exposed predators and inspired a global shift. A 2020 Pew Research study found 65% of women felt empowered to speak out post-#MeToo, reducing victim stigma. Collective non-negotiation—refusing to hide—strips predators of leverage. Your body, Your rules: A World Rebuilt: You are not fuel for their machine. You are fire, fierce and untamed. If a predator threatens you, do not negotiate. Do not pay, do not comply, do not hide. Share your story with a trusted friend, family member, or counselor. Silence empowers predators; your voice shatters their hold. Predators thrive on isolating you; they’ll back off if they know someone is watching. If anyone tries to distance you from this person, it’s a red flag. Step back, stay safe, and keep your circle tight. Even if you don’t have any, create an imaginary one and let your anonymous friend know that you’re not alone. Don’t wait for government or police to take an action silently. Be loud that everyone hear you. Your silence is their fuel. Your defiance is their end. Rise, speak, and never negotiate with those who seek to burn you. The world is yours to reshape. Conclusion: Some may argue that blackmail doesn’t discriminate by race, religion, or caste—that it’s a universal crime. While it’s true that anyone can be a victim, this ignores the deeper truth: women face unique vulnerabilities in a world shaped by men’s rules. Societal norms, from modesty standards to economic barriers, disproportionately burden women, making them prime targets for predators who exploit fear of shame. This article isn’t about division—it’s about awakening your strength. Regardless of your background, non-negotiation is your shield. Refusing to comply may feel daunting, but it’s the first step to breaking free. Every voice raised, every demand rejected, dismantles the predator’s power. You are not alone, and your defiance reshapes the world for all. "
    }, {
    "id": 12,
    "url": "https://solothought.com/rethink/silent-struggles-of-women_hindi/",
    "title": "मौन संघर्ष",
    "body": "2025/02/26 - Read in English सादी मेरी सोच पर, चुभते तेरे तीर,शब्दों के चयन से, नयन भए अब नीर।नयन भए अब नीर, कि ये परिवेश हुआ गंभीर,उभरे मेरे पीर, जब तुझे तुच्छ लगे ये चीर।सादी मेरी सोच पर, चुभते तेरे तीर।अग्नि क्या व्याकुल करे, जब सोच तेरी संकीर्ण,व्याकुलता भी क्षीण, कि अब अग्नि त्यागे शरीर।सादी मेरी सोच पर, चुभते तेरे तीर।कल, 17 फरवरी 2025 को, जब मैं एक​ दुकान से वापस आ रहा था, मैंने देखा कि एक लड़की बड़े से स्टील के कंटेनर के साथ फुटपाथ के किनारे चल रही थी, और अपने मोबाइल में व्यस्त थी। कई जगहों पर फुटपाथ की हालत खराब है—कहीं दुकानदारों ने कब्ज़ा कर रखा है, तो कहीं कचरे का ढेर लगा है, जिससे लोग सड़क पर चलने को मजबूर हैं। मेरी नज़र तीन लड़कों के एक ग्रुप पर पड़ी, जो एक ही बाइक पर तेज़ी से आ रहे थे। वे लड़की के पास से गुज़रते वक्त जानबूझकर उसके करीब से गुज़रे, उसे छेड़ने की कोशिश की। वह एक पल के लिए चौंकी, उन्हें घूरा, फिर वापस फुटपाथ पर चली गई और अपने फोन में व्यस्त हो गई। पीछे बैठे दो लड़के बेहयाई से हँसे और तेज़ी से चले गए। जब मैंने अपनी पत्नी को यह बताया, तो उन्होंने कहा, “यह तो लड़कियोँ के लिये आम बात​ है; वो इन सब पर​ ध्यान नहीं देतीं।” उनकी बात ने मुझे परेशान कर दिया। इस घटना ने मुझे सालों पहले की एक घटना की याद दिलाई, जो दिखाती है कि लड़कों का लड़कियोँ को इस तरह परेशान करना समय के साथ बना हुआ है। मैं अपनी बहन को उसके PG तक छोड़ने जा रहा था। रेलवे स्टेशन पर, कुछ शरारती लोग चलती ट्रेन से अपनी गन्दी परवरिश का परिचय दे रहे थे। काले अन्धेरे के वो काले चहरे तो मुझे याद नहीं, लेकिन आज भी मुझे वह गुस्सा और बेबसी याद है जो मैंने उस समय​ महसूस की थी। मेरी बहन उन्हें नज़रअंदाज़ करते हुऐ आगे बड़ गयी, मानो कुछ हुआ ही ना हो। ऐसी घटनाएँ मुझे गुस्से से भर देती हैं। आदमी और औरत धरती पर जन्मे वो दो प्राणी हैं, जो प्रकृति की नज़र में समान हैं, और अपनी अलग पहचान रखते हैं। मगर किसी लड़की की ख़ासियत को उसकी कमी के रूप में पेश करके, समाज ने लड़कियों का स्थान कमज़ोर बना दिया है। जिससे अपने फ़ायदे के लिए कभी भी उनका इस्तेमाल किया जा सके। यही तो होता है समाज के हर कमज़ोर वर्ग के साथ। क्या हम कल्पना कर सकते हैं कि लोग लगातार परेशान होने के डर में कैसे जीते हैं? उनके मन में क्या चलता है? और उनके माता-पिता के बारे में क्या? मैं कोलकाता रेप केस या दिल्ली निर्भया केस जैसे हाई-प्रोफाइल मामलों की बात नहीं कर रहा हूँ। रोज़ाना अनगिनत घटनाएँ होती हैं, जो दिखाती हैं कि कुछ तथाकथित “सभ्य” लोग कैसे बीमार मानसिकता के हो रहे हैं। यह मुद्दा सिर्फ शिक्षा का नहीं है — यह ख़ुशी के आशक्त हुए हमारे दुर्बल​ व्यवहार को दिखाता है, जिसमें हम अपनी रीढ़ की हड्डी खो चुके हैं। हम एक ऐसी दुनिया में जी रहे हैं जहां कचरे के बीच में लिए गए साफ-सुथरे फोटो हजारों लोगों द्वारा पसंद किए जाते हैं। उनमें से बहुत से लोग भद्दे कमेंट्स के साथ एक साफ-सुथरे माहौल को शर्मिंदगी से भर देते हैं। और क्यों न करें, आखिर ये आसान है। घर बैठे, बिना रीढ़ की हड्डी सीधा किए, यह बहुत आसानी से किया जा सकता है। डर सिर्फ वयस्क महिलाओं तक सीमित नहीं है। कुछ दिन पहले, एक 20 साल का लड़का अपनी बाइक मेरी बाइक की तरफ़ लहराकर निकला और हँसता हुआ चला गया। जहाँ मेरी बेटी हैरान थी, वहीं मैं उस लड़के की कमज़ोर मानसिकता में झाँक रहा था। 10 साल की इस कम उम्र में मेरी बेटी का समाज और उसके पहरेदारों से उम्मीद रखना ग़लत कैसे हो सकता है? बस स्टॉप से घर तक के 100 क़दम की दूरी कोई माँ-बाप सिर्फ़ खुशी के लिए तय नहीं करते। मैं नहीं चाहता कि कोई अपना बचपन इस नासमझ समाज के खोखलेपन को समझने में खो दे। मैंने हाल ही में एक ऐप से जुड़ा, जहाँ लोग अजनबियों से जुड़कर भाषा सीखते हैं, वहाँ यह देखकर कोई हैरानी नहीं हुई कि दुनिया के हर हिस्से में लड़कियाँ लड़कों की गिरी हुई सोच से पूरी तरह वाकिफ़ हैं। उन्होंने अपनी प्रोफ़ाइल में साफ़ शब्दों में लिखा था कि उन्होंने यह प्लेटफ़ॉर्म सिर्फ़ भाषा सीखने के उद्देश्य से जॉइन किया है, इसलिए कोई भी लड़का उनसे किसी और मकसद से संपर्क न करे। लड़कों के गंदे स्वभाव का अनुमान लगाना अब कितनी आम बात हो गई है। तीन साल पहले, मैंने इंस्टाग्राम पर अपनी बेटी, जिसकी उम्र सिर्फ़ 7 साल थी, का profile private कर दिया ताकि केवल परिवार और दोस्त ही उसकी उपलब्धियाँ देख सकें। शायद आप समझ सकें कि किस मानसिकता के लोगों से रूबरू होकर मैंने यह फैसला लिया। कैसे तय करें कि इसमें कौन ग़लत है? वो लोग जो सोशल मीडिया पर अपने खुशहाल पल साझा कर रहे हैं, वो लोग जो दूसरों को मानसिक तौर पर परेशान कर रहे हैं, या फिर खुद वो प्लेटफॉर्म्स, जो अपने फ़ायदे के लिए ऐसे लोगों को अपने प्लेटफॉर्म से जुड़ने दे रहे हैं? सोशल मीडिया प्लेटफॉर्म खुद में एक समाज बन गए हैं जहाँ विभिन्न संस्कृतियों के लोग बातचीत करते हैं। मगर हर समाज के कुछ नियम-कायदे होते हैं, जिससे उसमें रहने वाले लोग चैन की ज़िंदगी जी सकें। फिर आखिर सोशल मीडिया के नियम-कायदे उसके यूज़र्स के हित में क्यों नहीं? 18+ कंटेंट्स को सिर्फ़ चेतावनी के साथ पेश कर देना, उनकी पैसों के प्रति लालसा को दिखाता है। कंटेंट दिखाते समय उम्र और उस देश की संस्कृति को ध्यान में रखना सबसे ज़्यादा ज़रूरी है। टेलीग्राम ने इस साल 7 लाख से अधिक चैनल को बन्द​ किया जो बाल यौन शोषण से संबंधित थे। यहाँ जिम्मेदार कौन है? मानसिक विकलांग होती हुई नई जेनरेशन, या उसे विकलांग करते प्लेटफॉर्म, जो किसी की शिकायत करने तक ऐसे गंदे कंटेंट्स को फैलने देते हैं? आजकल भाषा में भद्दे शब्दों का इस्तेमाल गर्व की बात मानी जाती है। लड़कियों के नाम पर बने गंदे शब्द, जो पहले उन्हें शर्मिंदा करने के लिए गढ़े गए थे, अब लड़कियाँ खुद ही इस्तेमाल करने लगी हैं, सिर्फ इसलिए कि उन्हें FOMO (Fear of Missing Out) न हो। मुझे अब भी याद है, जब एक FM शो पर एक लड़की ने कहा था— “अगर लड़के सिगरेट पी सकते हैं, तो लड़कियाँ क्यों नहीं?” कोई समझाए उन्हें कि सिगरेट पीना कोई प्रतियोगिता नहीं है। और न ही गाली-गलौज को अपनी भाषा में घुसा लेना कोई मजबूरी है। मुझे एक comedy show याद है, जहाँ होस्ट ने एक भद्दा शब्द कहा, फिर रुका… और पूरा स्टूडियो हँसी में फूट पड़ा। शायद मैं उन कुछ लोगों में से था जो अब भी सोच रहे थे— “सब हँसे क्यों?” अगर आप शरीर के निजी अंगों पर खुलकर मज़ाक कर सकते हैं, या अपने ही परिवार के सदस्यों का भद्दे शब्दों में मज़ाक उड़ा सकते हैं, तो शायद आपके लिए comedy में करियर बनाने के अच्छे मौके हैं! कुछ दिन पहले, मैंने “छावा” फिल्म देखी, जिसने मुझे भावुक कर दिया। मैं सिर्फ एक शूरवीर को नहीं देख रहा था, जिसने अपनी भूमि, संस्कृति और लोगों की रक्षा के लिए अपना जीवन न्योछावर कर दिया—मैं इसकी तुलना आज की दुनिया से कर रहा था, जहाँ लोग अपनी ही भाषा में दूसरों का सम्मान तक नहीं कर सकते। Comedy shows को छोड़िए—क्या आप एक भी ऐसा आदमी जानते हैं, जिसने कभी किसी महिला पे आधरित​ गंदे शब्दों का इस्तेमाल न किया हो? Office, दोस्तों के बीच, यहाँ तक कि घरों में भी! हर किसी के पास लड़कियों पर भद्दे शब्दों का इस्तेमाल करने का कोई न कोई बहाना होता है— “अरे, गहरे दोस्त ऐसे ही बात करते हैं!” “हम तो सिर्फ लड़कों के बीच ही ऐसा बोलते हैं!” पर सवाल ये है कि क्या ये आपको मज़बूत इंसान बनाता है? क्या आप किसी महान व्यक्ति का नाम बता सकते हैं जिसने अपने आक्रोश को व्यक्त करने के लिए लड़कियों पर आधारित भद्दे शब्दों का इस्तेमाल किया हो? OTT प्लेटफॉर्म्स ऐसे कंटेंट से भरे पड़े हैं, जहाँ महिलाओं को कहानी में गहराई लाने के लिए नहीं, बल्कि सिर्फ दर्शकों को लुभाने के लिए शामिल किया जाता है। ये प्लेटफॉर्म यह तक स्पष्ट चेतावनी नहीं देते कि कौन-सा show पारिवारिक रूप से देखने योग्य है या नहीं। नतीजा? कई बार लोग अजीबो-गरीब स्थिति में फँस जाते हैं, जहाँ वो एक-दूसरे से नज़र नहीं मिला पाते। और कई बार दिखावा करते हैं कि कुछ हुआ ही नहीं। यह असहजता अब उन सभी की रोज़मर्रा की सच्चाई बनती जा रही है, जो इन OTT प्लेटफॉर्म्स का इस्तेमाल करते हैं। ऐसा नहीं कि इस समस्या का कोई हल नहीं है। मगर इससे हो सकता है कुछ दर्शक कम हो जाएँ, जो कि OTT प्लेटफॉर्म्स के बिज़नेस को नुकसान पहुँचा सकता है। मैं यह नहीं कहता कि अश्लील कंटेंट को OTT प्लेटफॉर्म्स से पूरी तरह हटा देना चाहिए। मगर कौन, कब, क्या देखना चाहता है—इस बात का फैसला करने का हक़ उसके यूज़र्स को होना चाहिए। हम उसी समाज में रहते हैं, जिसे हमने खुद बनाया है—ऐसे नियम बनाकर, जो कमजोरों की सुरक्षा के लिए थे। महिलाओं की रक्षा के लिए पहले कई कानून बनाए गए, जो उस समय ज़रूरी भी रहे होंगे। मगर जैसे-जैसे समाज बदला, इन नियमों पर दोबारा विचार ही नहीं किया गया। कई स्वतंत्र सोच रखने वाले लोगों ने पुरानी परंपराओं के ख़िलाफ़ आवाज़ उठाई, तब जाकर बदलाव आया। इस समाज को बदलना शायद कठिन होगा, मगर क्या हम खुद में भी बदलाव नहीं ला सकते? माने ना माने, इतिहास गवाह है कि किसी मर्द या मर्दानी को हराने के लिए किसी भरोसेमंद विश्वासघाती का बहुत बड़ा हाथ रहा है। Toxic Feminism आज के युग में लड़कियों के लिए धोखे की जगह पर प्रयोग किया जाने वाला नया और आधुनिक शब्द बन चुका है। बहुत सी लड़कियाँ प्रतिस्पर्धा के नाम पर मनोरंजन का साधन बन रही हैं। और सच कहें तो इसे रोकने के लिए कोई लड़का आगे नहीं आना चाहेगा, क्योंकि वही तो यही चाहता है। मैं पुरुषों के संघर्ष और उनके योगदान को नज़रअंदाज नहीं कर सकता। मेरा ग़ुस्सा लड़के, लड़कियों, OTT प्लेटफॉर्म्स और समाज के लिए समान रूप से है, जो प्रतिस्पर्धा, नाम और पैसों के आगे खुद को कमज़ोर बनाते जा रहे हैं। और आख़िर में, मैं उन सभी लड़कियों की सराहना करना चाहता हूँ, जो अपने भीतर हज़ारों अनकहे और दबे हुए ख़्यालों के बावजूद, हर दिन दुनिया के सामने शांत और मज़बूत बनी रहती हैं। "
    }, {
    "id": 13,
    "url": "https://solothought.com/rethink/silent-struggles-of-women/",
    "title": "Unsettled Thoughts: The Silent Struggles of Women",
    "body": "2025/02/18 - Yesterday, on February 17, 2025, while returning from a shop, I noticed a girl carrying a big steel container. She was walking on the side of the footpath, busy scrolling through her mobile. Footpaths in many places are not well-maintained—some are occupied by shopkeepers, while others are used as garbage dumps, forcing pedestrians to walk on the road. What caught my attention was a group of three boys, probably aged between 15 and 20, speeding on a single bike. As they passed the girl, they deliberately swerved close to her, trying to tease her. She was startled for a moment, glared at them, stepped back onto the footpath, and resumed scrolling her phone. The two boys sitting behind laughed shamelessly and sped away. When I told my wife about this, she simply said, “This is common; girls don’t pay attention to such acts. ” Her words upset me. This incident reminded me of something similar that happened years ago, proving that such harassment has been persistent over time. I was accompanying my sister to her PG accommodation. At a railway station, some miscreants hanging onto a moving train shouted vulgar words. I don’t remember their faces or exact words, but I still recall the anger and helplessness I felt. My sister ignored them and told me not to create a fuss. Such incidents make me furious. Men and women were meant to coexist with mutual respect. Yet, society has distorted this balance, often exploiting vulnerabilities rather than uplifting strengths. Can we even imagine what goes through the mind of someone who lives in constant fear of being harassed? And what about their parents? I’m not referring to high-profile cases like the Kolkata rape case or the Delhi Nirbhaya case. There are countless incidents happening daily, showing how some so-called “gentlemen” are turning into sick-minded individuals. This issue is not just about education—it is about a culture that is shifting from ethics, freedom, and humanity to ego-driven and pleasure-seeking behavior. We are living in a world where social media is replacing real interactions. People are getting addicted to quick bursts of happiness, losing self-control, and running away from struggles. The fear isn’t limited to the adult women alone. A few days ago, I faced a similar situation when a young man, around 20, tried to harass us while I was on a bike with my daughter. She is too young to understand such intentions. She often asks me to let her walk home alone from the bus stop, but I keep delaying that experience so she can enjoy her childhood a little longer. I recently joined a language-learning app where people practice languages with strangers. It was no surprise to see female users from around the world with bios saying, “No DMs,” “Don’t contact if you’re a pervert,” and “No romantic chats, please. ” Three years ago, I blocked some pedophile on Instagram and locked my daughter’s profile so only family and friends could see her achievements. Many parents must be doing the same. Whose fault is it? Is it the fault of those sharing happy moments on social media, the people making others uncomfortable, or the platforms themselves for allowing such behavior to intrude on someone’s independence? Social media platforms have become a virtual society where people from different cultures interact. It is necessary to define cultural boundaries and enforce strict guidelines on content. An adult content warning is not enough. Advanced filtering algorithms can be developed to restrict content based on age, ethnicity, or cultural sensitivity. Telegram has blocked more than 15 million channels and groups this year that shared content that violated the partner network’s usage policies, and banned more than 700,000 that were related to child sexual exploitation content. Who is responsible here? Is it the people with a twisted mindset who lack respect for others and even themselves, or the social platforms that allow such content to spread until someone complains? Casual sexism in language isn’t just limited to street harassment—it thrives in entertainment too, where vulgarity often gets rewarded as humor. I remember a local comedy show where the host said a bad word, paused, and the audience burst into laughter. If you have any of these qualities, you can probably make a career in stand-up comedy:  Use slang.  Talk about private body parts.  Make jokes about sex and relationships.  If nothing else works, abuse your own family members and disrespect the relationship in jokes. Today, I watched the movie Chhaava (छावा), which left me emotional. It wasn’t just about a king who gave his life to protect his land, culture, and people—I kept comparing it to the world we live in today, where people can’t even respect others in their language. Forget about vulgar stand-up comedy shows with billions of views—how many men do you know who never use bad words about women? It’s common to hear such language in offices, friend circles, and even homes. Many men justify it by saying, “We don’t mean it,” or “We only talk like this when women aren’t around. ” Using vulgar language about women, even in their absence, reflects weak character. OTT platforms are filled with content where women are included not to add depth to the story but merely to attract audiences for momentary gratification. These platforms don’t even provide clear warnings about whether a show is suitable for family viewing, leading to awkward moments where people have to keep skipping ahead to find a ‘safe’ point to resume. Some kids, mature beyond their age, pretend nothing happened by distracting themselves. This embarrassment is becoming a daily reality for anyone using these media platforms. I will probably cover this issue further, along with possible solutions that OTT platforms and Social media platforms can easily implement, in another post. We live in a society that we ourselves have built, creating rules to protect the vulnerable. Many laws were introduced in the past to safeguard women, which may have been necessary at the time. However, as society evolved, these rules were never revisited or updated. Many free-thinking individuals had to raise their voices against outdated norms to bring about change. Instead of blaming social media, shouldn’t we question why some men still view women as mere child-bearers, and why some women reinforce the idea of girls being objects of pleasure? I am not ignoring the struggles of men who also deserve respect or those who face exploitation from either gender. Neither am I supporting toxic feminism or the women who contribute to harmful stereotypes. The purpose of this article is to encourage small but meaningful changes in our behavior and language—changes that promote respect for others. We must also take a stand against the normalization of obscene content on OTT platforms and social media, which is making the younger generation impulsive and emotionally weak. And finally, I want to applaud all the girls who, despite having a thousand unsettled and suppressed thoughts, still manage to appear calm. Change starts with each of us—through the words we use, the behaviors we tolerate, and the respect we show. Let’s make sure no one has to silently struggle anymore. "
    }, {
    "id": 14,
    "url": "https://solothought.com/tutorial/flowchart-from-text/",
    "title": "Introducing Text2Chart: Transform Text into Interactive Diagrams",
    "body": "2024/11/10 - Creating diagrams can be time-consuming, especially when it comes to maintaining and sharing them across teams. @solothought/text2chart library changes that by turning plain text into interactive charts that are easy to version control, share, and maintain. In this article, I’ll explore how to get started with text2chart, dive into its features, and see how it can simplify creating, editing, and sharing visual information in projects of any size. Important links  text2object text2chartText2Chart &gt; FlowChart js accept the input in an algorithm format. Eg. 12345678910111213141516FLOW: Binary Search AlgorithmLOOP searching for target in array read low (initial index of array) read high (last index of array) IF low &lt;= high  THEN calculate mid ((low + high) / 2)  IF array[mid] = target   found target at mid   STOP  ELSE_IF array[mid] &lt; target   update low to mid + 1  ELSE   update high to mid - 1 ELSE  ERR Target not found  STOPThis library is dependent on text2object npm library that I developed to transforms the text in a JS object which can be traversed to perform a task like generating diagrams or automation. Setup: Text2Chart let user embed the chart to any webpage or javascript code in single line. In a Browser, you can embed the browser bundle and attach the FlowChart to some element on the page. Don’t forget to pass the algorithm when creating its instance and the bundled CSS. 12345678910111213141516&lt;script src= /text2chart. min. js &gt;&lt;/script&gt;&lt;script&gt;  const text = `    FLOW: solothought text2chart flowchart    testing on browser    is easy  `;  new Text2Chart. FlowChart({    target: document. getElementById('app'),    props: {    text: text    }  });&lt;/script&gt;or 1234&lt;script type= module &gt; import { FlowChart } from 'text2chart. min. mjs'; // Adjust path as needed //. . &lt;/script&gt; You can include it in your Nodejs project following Commonjs or Mjs format. You can also import it as Svelte Component. CommonJs 12const {FlowChart} = require('@solothought/text2chart');require('@solothought/text2chart/style. css');MJS 12import {FlowChart} from '@solothought/text2chart';import '@solothought/text2chart/style. css';Svelte 123456789101112&lt;script&gt; import FlowChart from  @solothought/text2chart/Flow. svelte ; import  @solothought/text2chart/style. css  const text = `  FLOW: Text2Chart Flow  use as a svelte component  🙏🏼 `;&lt;/script&gt;&lt;FlowChart style= width:100vw; height:100vh  {text} /&gt;Online Application: Our online application leverage its all the features. When you hover a node, by default, the path passing from the current step(node) is highlighted. By default, when you hover over a node, the path flowing from that step is highlighted. For enhanced navigation:  Shift + Hover highlights the path up to the current node.  Ctrl + Hover highlights the path from the current node. Sometimes the complete graph or path might be highlighted even if you press a key because of some loop in the crossing path. You can drag nodes individually or multiple by selecting nodes by Shift or Ctrl key—ideal for complex diagrams where edges intersect. Note that any algorithm changes will reset the graph layout; however, this behavior can be customized in your integration. To improve user experience, when you click a step, move cursor among steps, or select multiple steps in text-editor, relevant step nodes are highlighted in the chart. You can also click on edges to highlight them. It helps understanding overlapping edges. FlowChart supports multiple flows. You can select the graph for a flow from the select box. You can even click on ‘FOLLOW’ step node in graph to open relevant flow chart. Algorithm syntax consider text written in parenthesis as an extra information. You can hide that detail in the graph using eye icon in toolbar. More features are in development, so be sure to watch and star the Github repository for updates. "
    }, {
    "id": 15,
    "url": "https://solothought.com/literature/majboot-kandhe/",
    "title": "मज़बूत कंधे",
    "body": "2024/09/07 - I was shopping on a road side market when I saw a little girl selling cosmetics in a small pink basket. She was about six or seven years old and wearing a blue outfit that seemed too big for her. I noticed a man yelling at her, telling her to leave the area. The girl looked scared but tried to hold back tears. She wanted to cross that part of footpath to join her mother. But she was not able to dare due to that man. I offered her some money, but she refused and asked me to buy something from her basket instead. I still remember that day, which was in February 2024. I started writing a poem about it then and finished it in August 2024. 1234567891011121314151617कितने मजबूर होते हैं लोग, कि बचपना खो देते हैं।वैसे तो बहुत मज़बूत हैं, मगर अपने मिलने पे रो देते हैं।वो दौड़ते हैं हर किसी को, मगर दुत्कार ही मिलती है।कई तो अनदेखा करते हैं, तो कई से फटकार भी मिलती है।दो पल को सहम जाते हैं, फिर अपने से हो लेते हैं।वैसे तो बहुत मज़बूत हैं, मगर अपने मिलने पे रो देते हैं।तुम्हें तरस आता होगा, उनकी हालत ही कुछ ऐसी है।'बेचारा' मत कहना, उनकी शिकायत कुछ ऐसी है।मैंने चंद सिक्के बढ़ाए, मगर वो भीख नहीं लेते हैं।वैसे तो बहुत मज़बूत हैं, मगर अपने मिलने पे रो देते हैं।समझ सको तो समझो, उन्हें दौलत नहीं चाहिए।उधारी की ज़िंदगी किसी के बदौलत नहीं चाहिए।वो ना ज़िंदगी को दोष देते, ना कोई फ़िक्र लेते हैं।वैसे तो बहुत मज़बूत हैं, मगर अपने मिलने पे रो देते हैं।Kitne majboor hote hein log, ki bachpana kho dete hein. Wese to bahut majboot hain, magar apne Milne pe ro dete hein. Wo daudte hein har kisi ko, magar dutkaar hi milti hai. Kayi to andekha karte, to kayi se fatkaar bhi milti hai. Do pal ko saham jaate, phir apne se ho lete hein. Wese to bahut majboot hain, magar apne Milne pe ro dete hein. Tumhe taras aata hoga, unki haalat hi kuchh esi hai. ‘Bechara’ mat kahna, unki shikayat kuchh esi hai. Maine chand sikke badaye, Magar wo bheekh nahi lete hein. Wese to bahut majboot hain, magar apne Milne pe ro dete hein. Samjh Sako to samjho, unhe daulat nahi chahiye. Udhari ki zindagi kisi ke badualat nahi chahiye. Wo na zindagi ko dosh dete, na koi fikar lete hein. Wese to bahut majboot hain, magar apne Milne pe ro dete hein. "
    }, {
    "id": 16,
    "url": "https://solothought.com/literature/baarish-ka-rang/",
    "title": "बारिश का रंग",
    "body": "2024/06/10 - Yesterday, inspired by a friend’s request and the melancholic weather, I attempted to capture the emotions of a young boy whose heart aches from unrequited love. The sting of love’s rejection isn’t always about betrayal, but sometimes about the quiet sacrifice of unspoken feelings. 123456789101112दर्द-ए-जुदाई मेरे जज़्बात ने सोखाा इस कदरमैं उसकी आँखों से निकला, किसी कोने में बारिश होकरजुदा होना तो तय था हमारी पहली मुलाकात सेमैं उसकी हथेली पे टपका, ज़िंदगी से खारिज होकरहिना का तिरक​ के टूट जाना, उसके हाथ पे मेरे अश्कों की कमी थीरंग गहरा रचा, मिला मैं मेहंदी में जब गुज़ारिश होकरमेरा इश्क़ उसकी ज़िंदगी से, याद-ए-माज़ी बनके गुम जाएआरज़ू है कि रोज़-ए-अरूसी बरसू, आखिरी निगारिश(نِگارِش) होकर याद-ए-माज़ी : memory of past रोज़-ए-अरूसी: wedding day निगारिश(نِگارِش): writingIn English, if you find it difficulty to read Hindi words, here is easy version without any translation. Dard-e-judai mere jazbaat ne sokha is kadarMain uski aankhon se nikla, kisi koune mein baarish hokar Juda hona to tay tha humari pehli mulaqat seUski hathili pe tapka, zindagi se kharij hokar Henna ka tirak ke toot jana, uske hath pe mere ashko ki kami thirang gahra racha, mila main henna mein jab guzaarish hokar, mera isq uski zindagi se, yād-e-māzī banke gum jaayeaarzu hai ki roz-e-aroosi me barsu, aakhiri nigaarish hokar "
    }, {
    "id": 17,
    "url": "https://solothought.com/literature/the-power-glasses/",
    "title": "The Power Glasses",
    "body": "2024/03/02 - “The Power Glasses” published in March 2024. In ‘The Power Glasses’, join a curious young girl on an imaginative adventure that unlocks the secrets of perception. Through her journey, readers will discover the transformative power of seeing the world through others’ eyes, emphasizing the importance of empathy and understanding. They’ll understand how small change in our perspective can resolve many arguments and improve communication. Perfect for all ages, this enchanting tale invites readers to embrace the magic of perspective and the wonders it reveals. The book includes an interactive activity that engage it’s reader with th partner who join them in this journey. The book is suitable for all age people. You can download the vision card that is used in the activity and some images to perform the activity from below links  Vision Card Template Book Logo for the activity Half drawing for the activity dots for the activity"
    }, {
    "id": 18,
    "url": "https://solothought.com/literature/kabhi-kabhi-samundar-ko-bhi-sona-chahiye/",
    "title": "कभी कभी समंदर को भी सोना चाहिए",
    "body": "2024/02/07 - I attended a session few days ago where some people were sharing their problems with a psychologist. I was a silent listener in that seminar. But in the evening of that day, when I was remembering some important moments of that session, I wrote this poem. This poem is written in Hindi with a few words from Urdu language. The meaning of poem is cryptic as people may interpret differently as per their situation and perspective. कभी कभी समंदर को भी सोना चाहिए 1234567891011121314151617181920212223242526कभी कभी समंदर को भी सोना चाहिएमैं कश्ती लेकर निकलू सफर पेमगर उसे खबर नहीं होना चाहिएअगर कश्ती कभी पलट भी जाए मेरीतो उसपे किसी लहर की नज़र नहीं होना चाहिएकभी कभी समंदर को भी सोना चाहिएसमझता हूँ मेरे अल्फ़ाज़ों से एक डर झलकता हैना लड़ने की दरख़्वास्त मेरी कमज़ोरी सा लगता हैमगर मुझे लगता है किएक सख्त इंसान को भी कभी कभी रोना चाहिएऔर इसलिए कभी कभी समंदर को भी सोना चाहिएक्यूँ लड़ूँ मैं? कब तक? और किसके लिए?क्यूँ मरूँ मैं? हर घड़ी सिर्फ़ उसके लिएथकता हूँ मैं, टूटता भी हूँमुझे भी तो किसी की गोदी में सर रख कर सोना चाहिएकभी कभी समंदर को भी शांत होना चाहिएकभी कभी उसे भी मेरी तरह रोना चाहिएउसे मेरी जगह होना चाहिएमेरी सांसों में जो छटपटाहट है,उसे उनका एहसास होना चाहिएउसे भी मेरी तरह अकेले होना चाहिएऔर अगर ये नहीं हो सकता तोकभी कभी समंदर को भी सोना चाहिए"
    }, {
    "id": 19,
    "url": "https://solothought.com/tutorial/python-pandas-visual/",
    "title": "Visual Explanation of Python Panda Library",
    "body": "2023/12/02 -    If you’ve gone through the visual explanation of Numpy Library, there is one thing common in Numpy and panda that they both are used to store data and perform operations on that data.   For a quick difference, remember Numpy as a group of lists or multi-dimensional arrays whereas remember Panda as a table. We call those tables, Data Frame.   Pandas offer 2 data structures;      Series (one-dimensional)   DataFrame (two-dimensional)    Each column in a data frame is a series. You can consider a data-frame as a database table where we can query data just like SQL.      NumPy: Use NumPy when you need to perform numerical computations, especially with arrays or matrices. It’s ideal for mathematical operations, linear algebra, and scientific computing.    Pandas: Use Pandas when working with structured or tabular data. If you need to manipulate, clean, analyze, or visualize data stored in tables or CSV files, Pandas is the go-to library.       install      pip install pandas     import   1import pandas as pd     Contents Sharing Conditions  All the images and contents used in this article are meant to be used on Solothought. com only. You can use it to make your personal note. But publishing it on any site, blog, video or other medium without a link to this site or article is prohibited.   Things to learnYou can majorly divide your learning in 4 parts      Build Data frame: either in code itself or from some external file like Excel, CSV etc. Adding or deleting rows or columns.    Selection of data: Select a particular row or column, or a range. Group by data etc.    Operation on data: Like aggregation, Handling NA values etc.    Save Dataframe to a file: for future use.     For this tutorial, I’ve created a Jupiter notebook for direct practice. So download it on your local or test it online while you’re going through this article. All the images in this tutorial are self explanatory. So I’ll not explain much. However, if there is something that you find incorrect, confusing or unclear then leave me a message on the discussion forum.   First, you need to read the data and build a dataframe.   1234blog = pd. read_csv( blog. csv )opensource = pd. read_csv( opensource. csv )solothought = pd. concat([blog,opensource],keys=['blog','OpenSource'],names=['Type','idx'])# st = solothought           In the above diagram, I’ve tried to explain different parts of a dataframe. This is the same datafram, we’ll be using in our Jupyter notebook and throughout this tutorial. So understand it before scrolling down.     Fetch some records   123solothought. head()           #first 5 recordssolothought. sample(5,weights= views )  #any  5 recordssolothought. tail()           #last 5 records    Use apply or map function to perform any operation on each value of a column or row. In our sample data, we’ve a column where boolean values are stored as ‘n’ and ‘y’. So we’ll convert them in proper boolean values.   12# convert to booleansolothought[ featured ] = solothought[ featured ]. apply(lambda x: True if x == 'y' else False)    You can add a row by concatenating another dataframe. And a column can be added directly like solothought[ published on ] = &lt;Series|list&gt; in last in the same way we replaced solothought[ featured ] above with a new list. You can insert a column at a particular position as well. Use drop to drop a column. Don’t forget to specify axis. We’ll learn more about it when we know how to select.   123456l = list([ 1 Apr 2023 ,  2 Apr 2023 ,None,None,. . . ,None]) solothought[ published on ] = l# orsolothought. insert(4, published on ,l)# orst = solothought. assign(**{ published on :l})       Note that, there are many methods in pandas which return a new dataframe instead of updating the used one. So either you need to set inplace=True method parameter or assign to the data-frame.            Don’t be confused between null and na. NA means not available values. You can define a set of values which should be treated as NA values while reading the CSV file. It is quite important to fill NA values before analysis.   GroupBy operation confuses many. So let me explain that with a simple example;   1234567891011121314import pandas as pd# Creating lists for each columnc1 = ['A', 'A', 'A', 'A', 'B', 'B', 'B', 'B']c2 = ['a', 'a', 'b', 'b', 'a', 'a', 'b', 'b']c3 = [1, 2, 1, 2, 1, 2, 1, 2]# Creating the DataFramedata = {'c1': c1, 'c2': c2, 'c3': c3}df = pd. DataFrame(data)# Displaying the DataFrameprint(df)    Output   123456789 c1 c2 c30 A a  11 A a  22 A b  13 A b  24 B a  15 B a  26 B b  17 B b  2    If we group by above dataframe using c1 column then it’ll form 2 groups. And each group will have 4 rows.   12grp = df. groupby( c1 )grp. count()    Output   1234	c2	c3c1		A	4	4B	4	4    But if we group by c1 and c2 both then it’ll form 4 groups; (A,a), (A,b), (B,a), (B,b). And each group will have 2 rows.   123456		c3c1	c2	A	a	2    b	2B	a	2    b	2    Once you form groups using group-by operation, you can perform aggregate operation on a column that would be performed group wise. So the number of rows in output would be equal to number of groups you have.   12grp = df. groupby([ c1 ])grp. sum( c3 )    1234	c3c1	A	6B	6    We’ll some more examples later in this article.     You can select a row or set of rows or just the columns or particular value using proper index directly, or with loc or iloc methods.          When dropna      Use axis to drop col or row   Use how to drop if all values are NA or at least 1   Use thresh to check min NA before drop.    Use subset to set cols where to check NA values    You can even pass a list of Truth vallues to select rows and columns              But there is a better and fast alternate: query.                "
    }, {
    "id": 20,
    "url": "https://solothought.com/tutorial/java-all-in-one/",
    "title": "Java concepts - all in one chart",
    "body": "2023/11/25 -    This diagram is just the quick and all in one summary of Java concepts upto Java 17. It is not suitable for beginners. If you’re a beginner, I would suggest you to read The story of Kungfu Java Valley first.    Contents Sharing Conditions  All the images and contents used in this article are meant to be used on Solothought. com only. You can use it to make your personal note. But publishing it on any site, blog, video or other medium without a link to this site or article is prohibited.  "
    }, {
    "id": 21,
    "url": "https://solothought.com/tutorial/aws-database-decision-tree-mindmap/",
    "title": "AWS Database - Quick Reference Mindmap",
    "body": "2023/11/23 -    There are many databases and data store services are available on AWS. You can use this mindmap decision tree to remember and quickly decide which data base can be suitable for your architecture.    Contents Sharing Conditions  All the images and contents used in this article are meant to be used on Solothought. com only. You can use it to make your personal note. But publishing it on any site, blog, video or other medium without a link to this site or article is prohibited.   Please note that this analysis was done in Sep-Oct 2023. Any change after that is not updated in the diagram. Parameters are compared based on highlighted features. For a project, there can multiple other factors like integration with other services, data size, backup strategy, availability, backup time for high volume etc. So don’t follow this blindly. You also need to have prior basic knowledge to understand the terms.   This diagram contains brief introduction of following services      Aurora   Neptune   Elastic Cache   MemoryDB for Redis   DynamoDB   DynamoDB Accelerator (DAX)   Keyspaces   Quantum Ledger DB (QLDB)   Relational Database Service (RDS)   DocumentDB (with MongoDB compatibility)   TimeStream   "
    }, {
    "id": 22,
    "url": "https://solothought.com/tutorial/python-numpy/",
    "title": "Visual Explanation of Python NumPy Library",
    "body": "2023/11/04 - NumPy is one of the popular Python libraries. In this article, we’ll understand its usage with graphics and more practical approach. So you can visually relate and remember it.  Contents Sharing Conditions  All the images and contents used in this article are meant to be used on Solothought. com only. You can use it to make your personal note. But publishing it on any site, blog, video or other medium without a link to this site or article is prohibited. 1import numpy as np You can create numpy array by passing an array, or an array of array for multi-dimension array. It supports many formats. 123456np. array(list(range(4))) #array([0, 1, 2, 3])np. array((0, 1, 2, 3))  #array([0, 1, 2, 3])np. fromstring('1 4 ', sep=' ')np. fromstring('1, 2', dtype=int, sep=',')numpy. frombuffer(buffer, dtype = float, count = -1, offset = 0)numpy. fromiter(iterable, dtype, count = -1) #from iteratorSome quick ways to create NumPy arrays are 12345678910111213site = np. array([  [   [ S , O , L , O ],[ T , H , O , T ]  ],  [   ['. ','c','o','m'],['b','l','o','g']  ] ]);site. shape # (2, 2, 4)site. size # 16site. ndim # 3len(site) # 2You can also create an array with random values Some more functions:  arange: (a range) To create NumPy array.      np. arange(from ,to(not included), step)    1234567np. arange(1 ,15, 2) #array([ 1, 3, 5, 7, 9, 11, 13])a = np. arange(1,17). reshape(4,4)a# array([[ 1, 2, 3, 4],#    [ 5, 6, 7, 8],#    [ 9, 10, 11, 12],#    [13, 14, 15, 16]])Arithmetic Operations: 1np. array((1,2,3,4)) - 1 # array([0, 1, 2, 3])You can apply the other operations in the same way. However, remember that the right side array shape should be acceptable. This is also called Broadcasting.  1234567A(2-D array): 4 x 3B(1-D array):   3Result   : 4 x 3A(4-D array): 7 x 1 x 6 x 1B(3-D array):   3 x 1 x 5Result   : 7 x 3 x 6 x 5Other operations 12345np. subtract(a, b) #or a - bnp. add(a, b) #or a + bnp. divide(a, b) #or a / bnp. multiply(a, b) #or a * ba. dot(b)  #dot product between a,b You can also perform many math operations on all the elements of NumPy; 12345np. exp(a)  #Exponentiationnp. sqrt(a) #Square rootnp. sin(a)np. cos(a) np. log(a)Selection: To access an emelement from the array, you can use following patterns;  arr[from:to:step] - To create another array from the original array.      If from is not specified, it means 0   If to is not specified, it means length of that dimension   If step is not specified, it means 1    arr[at] - To select an elemnt at specific index arr[:] - all the elements of that dimension.  arr[…] - all the elements of that dimension.  arr[:] means from start to end with step 1. arr[::] also mean the same.  Isn’t it confusing that we can use multiple different expressions to select the same data from an array? Let’s understand why and how with examples. 12345678910111213141516site = np. array([  [   [ S , O , L , O ],[ T , H , O , T ]  ],  [   ['. ', 'c', 'o', 'm'], ['b', 'l', 'o', 'g']  ] ]);# All below expressions result ['T', 'H', 'O', 'T']site[0][1]site[0:1][0][1]site[0:2][0][1]# All below expressions result [['T', 'H', 'O', 'T']]site[0:1,1]Did you understand the difference between site[0][1] and site[0:1,1]? In case of site[0:1,1], we first create a new NumPy array then select it’s 2nd element.  In case of site[0,1], we just refer the 2nd column of 1st element and return it.  Negative index and direction: Nump array indexing work in the same way of python native lists. You can use negative step to reverse the list, or a negative index to select an item from reverse direction.  123456789site = np. array([  [   [ S , O , L , O ],[ T , H , O , T ]  ],  [   ['. ', 'c', 'o', 'm'], ['b', 'l', 'o', 'g']  ] ]);site[:,:,::-1]Output 12345array([[['O', 'L', 'O', 'S'],    ['T', 'O', 'H', 'T']],    [['m', 'o', 'c', '. '],    ['g', 'o', 'l', 'b']]], dtype='&lt;U1')Aggregation: NumPy provides direct function to perform an aggregation opperation and return the result.        fn   Description         a. sum()   sum       a. min()   min       a. max()   max       a. cumsum()   Cumulative sum       a. mean()   Mean       a. median()   Median       a. corrcoef()   Correlation coefficient       np. std(a)   Standard deviation   Axis: You can perform aggregation on particular dimension as well.  For a 3d array, there are 3 axis. When you select a particular axis, an operation is performed that axis-wise.  Let’s understand with one more example of max operation. 12npr=np. array([1,3,4,5,7,8,4,2,4,5,3,8])npr. reshape(2,3,2). max(axis=0) Restructure: Remember that each dimension should have same number of elements.  resize: Change the original array reshape: Returns a new array transpose: Rows into columns and vice versa You can append or concatenate 2 arrays in following ways; insert and delete works in the same way. For a 2d array, you can consider axis 0 as row and axis 1 as column. If you insert a single value, numpy automatically fill remaining items with the same value. Otherwise you need to take care of the size. 12a = np. arange(1,10). reshape(3,3)a = np. insert(a,1,[9,9,9],axis=0)Output 1234array([[1, 2, 3],    [9, 9, 9],    [4, 5, 6],    [7, 8, 9]])Since each row has 3 items, you can insert either 9 or [9,9,9]. any other shape will give error.  To understand delete operation, reverse the animation above. 1234a = np. arange(1,10). reshape(3,3)a2 = np. insert(a,1,[9,9,9],axis=0)a3 = np. delete(a2,1,axis=0)a == a3Output 123array([[ True, True, True],    [ True, True, True],    [ True, True, True]])If you want single value output 1np. array_equal(a,a3) # TrueSort operation can also be performed on whole array or only on particular axis. 12a. sort()a2. sort(axis=0)Advance Selection: Values from NumPy array can be selected by passing truth values array.  Clone:  Deep copy: b = a[:] or b = a. copy() View: b = a. view(). Any change in b will reflect on a other than change in shape Shallow copy (or reference): b = a. NumPy has many useful functions that reduce a lot of effort of managing and manipulating data. What you need to understand is  Direct operations Axis SelectionOnce these concepts are clear, you can understand and use it’s any function easily. But still if you feel I should cover more functions, leave a message on discussion forum. There are many other things that you can do with numpy like storing and manipulating dates, solving math expressions, matrix, loafin or saving numpy array from/to a file etc. "
    }, {
    "id": 23,
    "url": "https://solothought.com/philosophy/secure-otp-architecture/",
    "title": "System Design to secure OTP from Eavesdropping Apps",
    "body": "2023/11/01 - Now a days, almost all the mobile apps ask for SMS &amp; File permissions. And this is one of the mandaory permissions for some app to run. Some apps ask this permission so that they can fill the OTP their own so you relax for a few seconds and save your effort in typing 5-6 letters. But have you ever thought that if they can read one msg then they can read other messages too. And those messages can have very important information like credentials, financial information etc. Through this article, I’m sharing a technical thought that can stop apps asking for SMS permission for one time password only. It will also build confidence in user to use apps which requires minimum permissions. As you can see in the above picture, in this solution, we have a SMS Gateway that controls SMS in a device. An app that needs SMS permission to read OTP will generate an unique token and send it to it’s backend server. User will receive the OTP via SMS that include the unique token generated by app locally on the device. This token is also shared by the SMS controller app so that SMS controller or gateway app can share the message with the requester app. To extend this solo thought further, the dependency from mobile network can be removed and SMS gateway can be replaced with OTP Gateway that can be used just like OAuth works. If you really like this thought, please share it with others. If you’re implementing it your own, I would be happy to know about that. If you want to discuss further on this topic, let’s connect on our discussion forum. "
    }, {
    "id": 24,
    "url": "https://solothought.com/tutorial/python-function-quick-ref/",
    "title": "Python Method - Quick Reference",
    "body": "2023/10/24 - I hope all the images on this page are self explainatory. But let me cover in brief. Syntax 12345def function_name(parameters):	   docstring   	statement(s)print(function_name. __doc__);In Python, you can create a method/ function/ procedure (or whatever you call it) with required and optional parameters. Optional parameters can have either default value or they can accept any number of arguments (from 0 to *any). You can pass these optional arguments as single value or with key-value pair. But their sequence should match with what is defined in method definition. Required parameters are also called positional. So you can’t interchange them while calling the function.  Packing and unpacking of arguments and parameters: Nested Functions: Arguments passed to the original function will be passed to inner function of decorator function automatically. But what if you need to pass arguments to a decorator function Now what if you have to support a decorator with arguments and without arguments 1234567891011def repeat(arg):  # @repeat without arguments  if callable(arg):    # If the argument is a function, it means     num_times = 1    fn = arg  # @repeat with arguments  else:    num_times = arg    def decorator(fn):     :Yeah I know!! This is not cool. One more thing, you can also chain decorators  A function can be written in a single line as an expression using lambda keyword.  1(lambda x, y: x + y)(5, 3) #8 Quiz: Let’s check if you really understand it. Remember that a question may have multiple answers.      Previous      Next                 Question 1             A function is declared as def combine(you, have= like , *me, **along). Which of the statments is not true or give error                 combine(have= feelings )      combine(unknown= place )      A function can be called before it's definition.       combine( Kalai )                            Question 2             A function is declared as def combine(you, have= like ). Which of the statments is not true or give error                 combine(have= power , Kalai )      combine( Kalai ,have= power )      combine( Kalai )      None                 I hope now it is pretty clear to you. If you still have any doubt then let’s catch up on the discussion page. "
    }, {
    "id": 25,
    "url": "https://solothought.com/tutorial/python-list-quick-ref/",
    "title": "Python List - Quick Reference",
    "body": "2023/10/22 - Just remember list[start:end:-steps]. That’s all! There are many people who misinterpret above quick reference diagram and apply it on string. So Let me tell you how not to use it. 123456789word =  SOLOTHOUGH print(word[0:4])   #SOLOprint(word[-0:4])   #SOLOprint(word[-0:-6])  #SOLOprint(word[4:6])   #TH#word. append( T )   #Error: no 'append' attribute#print(word)     #ErrorBut how to use it 12345678910111213141516171819202122232425list = [ S , O , L , O , T , H , O , U , G , H ]print(list[0:4])   #['S', 'O', 'L', 'O']print(list[-0:4])   #['S', 'O', 'L', 'O']print(list[-0:-6])  #['S', 'O', 'L', 'O']print(list[4:6])   #['T', 'H']list. append( T )print(list)      #['S', 'O', 'L', 'O', 'T', 'H', 'O', 'U', 'G', 'H', 'T']list = list + [ .  , C , O , M ]print(list)      #['S', 'O', 'L', 'O', 'T', 'H', 'O', 'U', 'G', 'H', 'T', '. ', 'C', 'O', 'M']#Unpackingplatform = ['S', 'O', 'L', 'O', '💭']other = [*platform]  #supported by tuple, setanother = platform[:] #supported by tuple but not set#dictionaryabout = {   feature  :  simplified ,  aim    :  another perspective }{**about}Compare: Python supports different similar data structure. And you should understand the difference.  Lists are editable, indexed, ordered Tuples are read only lists Set are like set :) You can say unique list. And not ordered.  Dictionary is like json or map or objectYou can store different data types in any of above DS. And you can have nested DS as well.  Quiz: Let’s check if you really understand it. Remember that a question may have multiple answers.      Previous      Next                 Question 1             Select ['T', 'H', 'O', 'U', 'G', 'H', 'T'] from ['S', 'O', 'L', 'O', 'T', 'H', 'O', 'U', 'G', 'H', 'T', '. ', 'C', 'O', 'M']                 list[4:11]      list[4:10]      list[-5:-12:-1][::-1]      None                            Question 2             You’re given with following lists. Select the correct option to build ['S', 'O', 'L', 'O', 'T', 'H', 'O', 'U', 'G', 'H', 'T', '. ', 'C', 'O', 'M']            123a = [ S , O , L , O ]b = [ T , H , O , U , G , H ,  T ]c = ['M', 'O', 'O', 'C', '. ']                              123c = c. remove( O )c. reverse()a + b + c                           a + b + c. remove( O ). reverse()              123c. remove( O )c. reverse()a + b + c                           None                            Question 3             Your target is to remove ['S', 'O', 'L', 'O'] from list = ['S', 'O', 'L', 'O', 'T', 'H', 'O', 'U', 'G', 'H', 'T', '. ', 'C', 'O', 'M']                 list[0:3]=[]      list[0:4]=[]      list. remove(0,4)      list = list. remove(0,4)                            Question 4             For list = ['S', 'O', 'L', 'O', 'T', 'H', 'O', 'U', 'G', 'H', 'T', '. ', 'C', 'O', 'M'], What would be the correct answer of [x for x in list if x ==  O ]                 Error      []      ['O', 'O', 'O', 'O']      'OOOO'                            Question 5             For list = platform = ['S', 'O', 'L', 'O', '💭'], which statement is correct to create a set from this list.                 another = *platform      another = [*platform]      another = [**platform]      another = {*platform}      another = platform[:]                 I hope now it is pretty clear to you. If you still have any doubt then let’s catch up on the discussion page. "
    }, {
    "id": 26,
    "url": "https://solothought.com/info/fxp-5-prerelease/",
    "title": "Fast XML Parser v5 - Pre release",
    "body": "2023/10/14 - You decide what to change next I’m working on Fast-XML-Parser v5 from a long time. It’s Parser is almost ready but before finalizing the changes and approach, I want you to control this release. FXP parser is now broken down in 3 separate units so user can control them as per their convenience.  SourceReader Processor OutputBuilderSourceReader reads the data and give it to the processor. It can read the data from a buffer, stream, string, or some encrypted encoded data of your choice. You can fully control it. Now you can decide if CPU is more important or memory. Output builder is responsible to create the final data structure. It can be a JSON format, YAML, Nimn. You can store the output in memory, or write it to the stream. You can control if an attribute or a tag should be skipped or how their values should be parsed. Don’t worry, it’s easy. In the upcoming version, I’m reducing the configuration as much as possible so they confuse you less but still keep the process customizable as per your need. Every unit can be configured separately. Expected Release date: Well! I can’t commit any date right now. Since I don’t want to compromise with the performance, I rewrite a lot of code multiple times until I achieve the desire throughput. This makes the process slow. On top of that, I’ve limited time for open-source. So sometimes I need to pause the development for many months. Parser part is almost completed. I’ve to just brainstorm on jpath. I want to provide the better way of providing the jpath that can support more features in future. Once it is done, I need to sync all the source readers and output builders that I’ll provide within the package by default. However, you can create your own as well. Once the parser is done, my plan is to embed the validator within the parser but with flexible and strict rules of throwing exception. Finally, I will work on builder so that it can also support external output builder. This can help you to work with big files. Somewhere in between, I need to sync the patches developed after I cut v5 branch. And complete the tests. It’ll be a big set. So keep checking this page once in a month for new updates. In the next update, I’ll give hint about changes in configuration. So you can give me your suggestions. If you have any suggestion or question then let’s discuss. "
    }, {
    "id": 27,
    "url": "https://solothought.com/tutorial/aws-story/",
    "title": "Amir Wishu Sehgal cafe: The story of opportunities",
    "body": "2023/07/18 - Amir Wishu Sehgal, a 23-year-old with dreams as vast as the open sky, resided in a small flat on rent. This humble abode happened to be in the same building as Gurutaap’s shop. The building was nestled in a close-knit community where people may not have been wealthy in material possessions, but they possessed hearts filled with warmth and generosity. It was a place where neighbors knew each other by name, where doors were always open for a cup of tea and a friendly chat. In this small but lively building, the residents formed a unique bond. They shared more than just walls; they shared their joys, sorrows, and even everyday items. It was a place where a cup of sugar or a carton of milk could be borrowed from a neighbor without a second thought. They believed in the power of community, supporting one another through thick and thin. Amir, Gurutaap, and their neighbors were no strangers to the value of saving money. They understood the importance of stretching every penny and making the most of what they had. They would gather for potluck dinners, where each person contributed a dish, creating a feast that was shared by all. They organized small events and celebrations within the building, pooling their resources to create moments of joy and togetherness. It was in this backdrop of camaraderie and resourcefulness that Amir’s idea of opening a cyber cafe took root. He saw an opportunity not only to fulfill his own dreams but also to uplift the community he held dear. Amir envisioned a place where neighbors could gather, connect with the world, and explore new horizons. He wanted to bring the marvels of the internet to their fingertips, creating a space that would inspire and empower. As Amir shared his idea with Gurutaap, his eyes gleamed with excitement. Gurutaap, who had witnessed the strength of their community firsthand, immediately recognized the potential of Amir’s vision. He believed that this venture could not only uplift their own lives but also create opportunities for others in the neighborhood. Gurutaap saw the cyber cafe as a beacon of hope, a place where dreams could be nurtured and realized. Anurag, who resided nearby and often found himself in need of a workspace outside of office hours, was drawn to Amir’s idea like a moth to a flame. He had experienced the struggle of finding a suitable place to work, brainstorm, and unleash his creativity. Anurag saw the cyber cafe as a haven where he and others could find solace, inspiration, and the tools needed to bring their ideas to life. He wholeheartedly supported Amir’s vision, recognizing the immense potential it held for their community. With their shared dreams and determination, Amir, Gurutaap, and Anurag embarked on a journey that would shape not only their lives but also the lives of those around them. Once Amir, Gurutaap, and Anurag had successfully set up the cyber cafe, it quickly became a popular gathering spot for their friends and neighbors. In the evenings, it transformed into more than just a place for internet access; it became a hub of laughter and camaraderie. The friends would gather, sharing stories, making playful jokes, and creating memories that would be cherished for years to come. It was a testament to the strong bond they had formed, and the cyber cafe became the backdrop of their friendship. Amir, always attentive to the needs and desires of the community, realized that there were opportunities to expand the services offered by the cyber cafe. He wanted to make it a one-stop destination for all their digital needs. With this vision in mind, he decided to introduce additional amenities to attract a wider audience. Amir added a small section within the cyber cafe where people could purchase stationery items. He noticed that many of his customers, particularly students, required pens, notebooks, and other supplies for their academic pursuits. By providing these essentials, Amir not only met their needs but also increased the footfall at the cyber cafe. It became a convenient place where students could both study and access the internet, eliminating the need to travel to different locations. Furthermore, Amir recognized the growing popularity of digital payments and wanted to offer a seamless transaction experience for his customers. He introduced the option to receive payments through UPI (Unified Payments Interface), a convenient and secure method that allowed customers to pay for their services easily using their smartphones. This not only streamlined the payment process but also aligned the cyber cafe with the digital trends of the time. As the cyber cafe gained popularity, Amir keenly observed the diverse needs of his customers. Some individuals frequented the cafe not only for internet access but also for gaming. They sought a space where they could immerse themselves in their favorite online games, competing with friends or exploring virtual worlds. Amir realized the potential in catering to this gaming community and decided to allocate a separate area with high-performance computers and gaming peripherals. This addition attracted a new segment of customers, further boosting the success of the cyber cafe. Amir also noticed that many individuals, including freelancers and remote workers, required a dedicated space to carry out their professional tasks. Recognizing this need, he introduced a service where individuals could rent the computers and workspace on an hourly basis. This provided a flexible and cost-effective solution for those who required a workstation for freelance projects or other professional work. With each new addition and service, the cyber cafe evolved into a thriving hub that catered to a wide range of needs. It became a place where students found resources, gamers indulged in their passion, and freelancers found a productive environment. Amir’s keen observation and willingness to adapt to the needs of the community ensured the continued growth and success of the cyber cafe. Amir had always been passionate about education and believed in the power of knowledge. He often found himself helping the children of his building with their studies, offering guidance and support whenever they needed it. He dedicated his free time to tutoring them, ensuring they had a strong foundation in their academics. One fateful day, the exam results were scheduled to be announced. However, amidst the busyness of running the cyber cafe and attending to his customers, Amir completely missed the news. Little did he know that the children from his building had eagerly awaited their results and were planning a surprise visit to the cyber cafe.  As the day unfolded, the children arrived at the cyber cafe, excitement radiating from their faces. They rushed in, hoping to check their results online. To their dismay, all the machines were occupied, and the atmosphere was bustling with customers engrossed in their own tasks. The kids looked at each other, disappointment creeping into their eyes. Amir’s heart sank as he realized the chaos that had ensued. He felt a deep sense of regret for not being aware of the significance of the day and the impact it would have on the children. He understood their anticipation and could not bear to see them disheartened. In a desperate attempt to rectify the situation, Amir approached his customers, explaining the predicament and requesting them to temporarily vacate their machines. He refunded their money in full, apologizing profusely for the inconvenience caused. While some customers were understanding and willingly obliged, others were reluctant to interrupt their work or leave their tasks unfinished. Despite the challenges, Amir managed to secure a few machines for the children to check their results. The kids huddled around the screens, their eyes scanning the pages as they eagerly searched for their names. As the results flashed on the screens, their faces lit up with joy and relief. They celebrated their achievements, grateful for Amir’s efforts and the opportunity to share this moment together. However, Amir couldn’t shake off the feeling of helplessness and the chaos that had unfolded. He realized that he needed a more efficient solution to cater to the needs of the community without disrupting the workflow of his customers. After much contemplation, he devised a plan to rent additional machines that could be easily returned on short notice. Amir reached out to a computer rental service and arranged for a set of computers that could be borrowed as needed. This way, if a situation like the exam results arose again, he would have the flexibility to accommodate the children without causing inconvenience to his customers. The rental service agreed to the arrangement, understanding the unique needs of the community. This decision proved to be a turning point for Amir, his business, and the community. The availability of additional machines on short notice brought a sense of relief and convenience to both the residents and customers of the cyber cafe. It created a harmonious balance where the needs of the community were met, while the business continued to thrive. While the arrangement with the computer rental service initially seemed like a viable solution, Amir soon encountered several challenges. Bringing the machines from another location took time, resulting in delays and inconvenience for the community. Additionally, setting up the machines temporarily in the cyber cafe required rearranging the space multiple times throughout the day, disrupting the flow of operations. Realizing the limitations of relying on external rentals, Amir began exploring an in-house solution to address the issue. He brainstormed with his friend Gurutaap, who managed a neighboring shop. Together, they devised a plan to set up a small section within Gurutaap’s shop dedicated to computer workstations. Amir and Gurutaap enlisted the help of some boys from Gurutaap’s shop, who were excited at the prospect of contributing to the community and being a part of this new venture. They rolled up their sleeves, enjoyed some tea and samosas, and set about creating a comfortable and efficient workspace. Laughter and friendly banter filled the air as they worked together, making the process enjoyable and lighthearted.  With the workspace set up, Amir and Gurutaap ensured that the necessary internet connectivity and equipment were in place. They collaborated to create a system where the community members could easily access the additional devices whenever needed. This in-house solution not only eliminated the delays and disruptions caused by external rentals but also fostered a stronger sense of ownership and control over the resources. To further enhance the capabilities of the cyber cafe, Amir sought the assistance of his friend Anurag, who worked in a company that had surplus computer devices. These machines were not being utilized for an extended period, and Anurag saw an opportunity to contribute to the community and put the devices to good use. Anurag facilitated the purchase of the extra devices from his office, ensuring that they were available for the community’s needs. This collaboration not only expanded the resources of the cyber cafe but also strengthened the bond between Amir, Anurag, and the community. Together, they were able to create a space that catered to the diverse needs of the residents, fostering an environment of growth, collaboration, and empowerment. The in-house solution, coupled with the additional devices, brought immense benefits to the community, Amir, and his customers. The community members had easy access to the resources they needed, whether it was for educational purposes, gaming, or professional work. Amir saw the satisfaction and gratitude in the faces of the residents as they utilized the facilities, reinforcing his belief in the power of community and the impact of his endeavors. To further optimize the resources of the cyber cafe, Amir decided to attach peripherals, such as keyboards, mice, and monitors, to the high-end devices in the cyber cafe. By doing so, he could utilize the spare capacity of these high-end devices when they were not being actively used by their primary users. In simpler terms, let’s say there are some computers in the cyber cafe that have more power and capacity than what is typically required for everyday tasks like browsing the internet or using office applications. These computers are considered high-end devices. Instead of letting their power go to waste, Amir decided to connect additional peripherals to these high-end devices. By attaching peripherals, Amir was able to create additional workstations that could be used by other customers. These workstations shared the power of the high-end devices, allowing multiple users to benefit from their spare capacity. For example, if a customer needed to use a computer for gaming or resource-intensive tasks, they could connect to one of these workstations and enjoy a high-performance experience. This strategy not only maximized the utilization of the high-end devices but also provided a cost-effective solution. Instead of investing in separate computers with similar capabilities, Amir leveraged the existing resources and expanded the capacity of the cyber cafe. It enabled more customers to access powerful machines without the need for additional purchases or expenses. By making efficient use of the spare capacity of high-end devices through the attachment of peripherals, Amir was able to cater to a wider range of customer needs. The customers benefited from the enhanced capabilities of the workstations, while the cyber cafe made the most of its resources. It was a win-win situation that optimized the usage of available technology and improved the overall experience for the community. Considering the need and to improve the communication, Amir thought to digitalize the daily gossip among the people of his building. he asked some of his customers if they can help him and took the guidance from Anurag. The chat application that Amir and his team were testing had a special purpose. It was specifically designed for the people living in Amir’s building, including the residents and the community members. The unique thing about this chat application was that it could work without an internet connection. This means that even if there was no internet available or if there was a disruption in the internet service, the people in the building could still use the chat application to communicate with each other. Gurutaap’s shop was the perfect location to have a machine connected to his cafe for this chat application. Despite the potential cost of extra wiring and setup, Gurutaap was always ready to experiment and try new things for the benefit of the people in his community. He understood the importance of having a reliable and accessible communication platform for the residents, especially in situations where the internet may not be available. By having a machine in Gurutaap’s shop connected to the chat application, it created a hub for the people in the building to communicate and stay connected. They could go to Gurutaap’s shop, use the machine, and chat with their neighbors and friends without needing an internet connection. It provided a convenient and reliable way for the community members to stay in touch, share information, and support each other, even in times when the internet was not accessible. This chat application, designed specifically for the community in Amir’s building, served as a safe and secure platform for communication. It allowed the residents to have private conversations with each other without the need to worry about their messages being seen by strangers or outsiders. It provided a sense of privacy and security, ensuring that the conversations within the community remained within the community. By utilizing the chat application, the residents could easily coordinate events, share important announcements, ask for help, or simply have friendly conversations. It fostered a sense of unity and connectedness among the people in the building, creating a supportive and inclusive community environment. Though the chat application could have been developed and tested from his cafe only, his idea to have another point in Gurutaap’s shop as intentional. He wanted his people to feel the joy, give the suggestions, and improve the application with their feedback. This also lead an idea that Amir can run delegate some of his work to Gurutaap’s shop. It was just the beginning of the extension of his cafe. One day, a machine in his cyber cafe experienced a sudden failure, resulting in the loss of data for some customers including the code for chat application his team was writing. Amir was devastated by this incident and realized the need for a backup plan to prevent such data loss in the future. He was lucky to have another cop of code in the machine he setup on Gurutaap’s shop. But he couldn’t recover the data of other customer’s. It was not only the financial loss he bared but he also lost of the trust of many customers. He never wanted to let this incident happen again. Amir understood the need for multiple machines in this scenario. Having all the machines in a single shop posed a risk. If any issue occurred, such as a power outage or hardware failure, it could disrupt the entire testing process of his chat application as well as other customer’s work, causing delays and inconvenience for the customer. To mitigate this risk, Amir decided to utilize Gurutaap’s shop as a secondary location for the customer’s needs. Gurutaap had been facing financial difficulties with his current business and was eagerly looking for an opportunity to turn things around. This collaboration would benefit both Amir and Gurutaap, as it would bring in additional business for Gurutaap’s shop while ensuring the customer’s data was not hindered by any unforeseen incidents. Sangeeta is a resident of Amir’s building, living on the third floor while Amir resides on the fifth floor. She has long black hair, which flows gracefully down her back. Sangeeta is not just an acquaintance of Amir, but a good friend who often helps him with studying, planning, and organizing events in the building. Like everyone else in the building, Sangeeta aspired to secure a good-paying job to support herself and contribute to the community. She had been preparing for a job interview for a long time, putting in hours of hard work and dedication. However, on the day of the interview, things did not go as expected. The weather took a turn for the worse, with rain pouring down heavily, causing traffic jams and making it difficult for Sangeeta to find an auto-rickshaw to commute to her interview location. In the midst of the chaos, Sangeeta realized that reaching Amir’s shop, on the opposite side of the street, would not be possible due to the limited time she had. However, the additional setup in Gurutaap’s shop provided her with a glimmer of hope. It offered her an opportunity to face the interview remotely, without physically going to the office. As soon as Amir, got wind of Sangeeta’s predicament, he rushed to the scene. The sight of a crowd gathered outside Gurutaap’s shop, “Guutaap Chai Paan,” caught his attention. Worry lines etched his face as he wondered how Sangeeta would manage to have her interview under such circumstances. Gurutaap, known for his curiosity and eagerness to help, looked on with a mix of curiosity and concern. Inside the shop, Sangeeta sat nervously, her heart pounding with anticipation. She had a laptop in front of her, connected to the video chat. With every passing moment, her anxiety grew, unsure if this new setup would work seamlessly. However, as she finished her interview, a wave of happiness washed over her face. She emerged from the shop with a radiant smile, her worries replaced by relief and satisfaction. The dramatic turn of events had led Sangeeta to face her interview in an unconventional yet successful manner. The additional setup in Gurutaap’s shop had provided her with the means to connect remotely, showcasing the power of technology and the resourcefulness of the community. Sangeeta’s triumph not only brought joy to her own face but also inspired those around her, reinforcing the belief in the strength of unity and the potential that lies within their community. Although Amir hadn’t planned for the Gurutaap location intentionally, the incident of a machine failure had sparked the idea of utilizing multiple locations. Amir thanked his lucky stars for the machine failure that day. It not only led to the discovery of a solution that benefited the community, but it also helped Sangeeta in a crucial moment, showcasing the positive impact of Amir’s work. This incident inspired Sangeeta, as she witnessed firsthand how Amir’s dedication to providing reliable and accessible technology made a difference in people’s lives. She was grateful for the distributed setup and recognized the value it brought to the community. This experience motivated her to explore ways to contribute to the community herself, realizing the potential of technology in creating opportunities and overcoming challenges. San geeta, a fictional character of AWS story Though the story doesn’t end here, I would like to feel this mesmerizing moment where the raindrops continued to fall, but they were no longer a hindrance. They became a backdrop to the triumph and resilience of Sangeeta. This moment was filled with an overwhelming sense of joy, as the sound of laughter and the warmth of hugs filled the air. It was a moment that would forever be etched in their memories and mine too. Each drop landing softly on Sangeeta’s face, a delicate dance between the raindrops and her tears. The wetness mingled together, as if the rain itself was joining her in her emotional journey. But amidst the rain-soaked chaos, a glimmer of happiness flickered in Sangeeta’s eyes, a spark of triumph that couldn’t be extinguished. Amidst the downpour, Amir stood on the opposite side of the shop, pushed back by the crowd. Happiness on his face with a big smile over the worry and anticipation he had. Let’s meet in the next part of this story. "
    }, {
    "id": 28,
    "url": "https://solothought.com/tutorial/the-preparation-of-battle/",
    "title": "Chapter 2: The Preparation of Battle",
    "body": "2023/06/29 - The Java valley is always under the threat. So all the masters must be prepared all the time. It wasn’t solely Po’s unwavering determination that led to Master Shifu’s decision to anoint him as the master, as we read in Chapter 1. Astonishingly, Master Oogway had perceived something extraordinary in Po, a hidden secret concealed within a chest safeguarded in the enigmatic depths of the Temple’s secret chamber. The chamber itself remained a clandestine sanctuary, known only to Master Shifu, shrouded in mystery and concealed from the prying eyes of any other master. In the mystical land of Java Valley, there was a grand gathering of martial artists from different clans. Each clan had its own unique set of skills and techniques. The gathering was organized by the Java Clan, known for their mastery of nested classes and nested interfaces. The Java Clan believed in the power of encapsulation and wanted to organize their skills in a hierarchical manner. They used nested classes and nested interfaces to achieve this goal. The nested classes represented different levels of mastery within the clan, while the nested interfaces represented specific skill sets. Within the Java Clan, there was a class called GrandMaster. This class served as the outer class and contained several nested classes and nested interfaces. Each nested class represented a different level of mastery, from Novice to Master, while each nested interface represented a specific skill, such as Swordsmanship or Meditation. 1234567891011121314151617181920212223242526class GrandMaster {  // Nested class representing Novice level  class Novice {    // Novice level skills and techniques  }    // Nested class representing Apprentice level  class Apprentice {    // Apprentice level skills and techniques  }    // Nested class representing Master level  class Master {    // Master level skills and techniques  }    // Nested interface representing Swordsmanship skill  interface Swordsmanship {    // Swordsmanship techniques  }    // Nested interface representing Meditation skill  interface Meditation {    // Meditation techniques  }}The Novice, Apprentice, and Master classes represented different levels of mastery within the Java Clan. Each class had its own set of skills and techniques that were taught to the members of the clan at that particular level. The Swordsmanship and Meditation interfaces represented specific skills that were highly valued within the Java Clan. These interfaces defined the techniques and methods that needed to be mastered in order to become a true warrior of the Java Clan. By incorporating the Meditation interface, the Java Clan emphasizes the importance of mental well-being and the benefits it brings to their martial arts practice. 123class Warrior implements GrandMaster. Swordsmanship, GrandMaster. Meditation {  // Implement Swordsmanship and Meditation techniques}Warriors of the Java Clan, such as the Warrior class, could implement these nested interfaces to showcase their proficiency in specific skills. By implementing these interfaces, the Warrior class gained access to the techniques and methods defined within the interfaces. The use of nested classes and nested interfaces allowed the Java Clan to organize their skills and techniques in a structured and hierarchical manner. It provided clarity and encapsulation, ensuring that each level of mastery and each skill set had its own dedicated space within the clan. In conclusion, the Java Clan utilized nested classes and nested interfaces to organize their skills and techniques in a hierarchical manner. The nested classes represented different levels of mastery, while the nested interfaces represented specific skill sets. This organizational structure allowed the clan members to showcase their proficiency in different skills and techniques, ultimately making them formidable warriors in the land of Java Valley. The nested interfaces Swordsmanship and Meditation allowed the Java Clan to define specific skill sets within their martial arts practice. By nesting these interfaces within the GrandMaster class, the Java Clan could group related interfaces and limit their scope to the context of the GrandMaster class. This ensured that these skills were encapsulated within the martial arts practice of the Java Clan and provided a clear contract for future warriors to implement and master these skills.   📌 Info  You know a class or an interface can be created inside a method too. EnumEnums can be used to represent the different ranks, directions, or even the emotions experienced by the warriors during their journey. For example, the Java Clan could use an enum to represent the different directions, such as NORTH, SOUTH, EAST, and WEST, which could be used to navigate through the martial arts techniques and strategies. By using enums, the Java Clan can ensure that the values of these essential aspects of their martial arts practice are fixed and cannot be changed. This provides a clear and consistent way to represent these values throughout the decision making process and discussions. New warriors undergo hard training sessions. During these training sessions, different emotions can arise, and the Java Clan wants to handle each emotion differently.  12345678910111213141516171819202122232425public enum Emotion {  CALM {    @Override    public void handleSituation() {      // Handle situation for calm emotion      System. out. println( Stay focused and maintain inner peace.  );    }  },  ANGRY {    @Override    public void handleSituation() {      // Handle situation for angry emotion      System. out. println( Channel your anger into controlled power.  );    }  },  PEACEFUL {    @Override    public void handleSituation() {      // Handle situation for peaceful emotion      System. out. println( Embrace the serenity and harmonize your movements.  );    }  };  public abstract void handleSituation();}During the hard training sessions, the Java Clan can invoke the handleSituation() method based on the emotion experienced by the new warriors. It helps to examine if a warrior is ready for the next phase. Be Anonymous 📌 Info  Anonymous classes in Java are a specific type of nested class. They are defined without a name and can be created inside another class or interface. Anonymous classes often extend subclasses or implement interfaces. In the Java Clan, there exists a Warrior Pool, which holds the responsibility of providing warriors for battle. However, creating an instance of a warrior is not an easy task and can consume a significant amount of time, which is not affordable during war. To address this challenge, a separate community called the Warrior Pool was created to manage the pre-existing images provided by each master. Before handing over a warrior to the villagers for combat, the Warrior Pool employs a special technique to sanitize all the images, ensuring they are safe and free from any potential vulnerabilities. To standardize the sanitation process, a separate entity called SecretsSanitizer was established. The Warrior Pool community opted for an anonymous approach to apply the standard sanitation process with their own logic. 123456789101112131415161718192021222324252627public interface SecretsSanitizer {  default Warrior sanitize(Warrior warrior){    return warrior;  }}public class WarriorPool {  public Warrior giveWarrior() {    // Take warrior image from the available pool    SecretsSanitizer secretsSanitizer = new SecretsSanitizer() {      @Override      public Warrior sanitize(Warrior warrior) {        // Remove any manuscript        // Remove the knowledge about the secret chamber        return warrior;      }    };    Warrior warrior = // Retrieve warrior from the pool    // Sanitize the warrior before giving it to the villagers    Warrior sanitizedWarrior = secretsSanitizer. sanitize(warrior);    return sanitizedWarrior;  }}Over time, they realized the need to make the process more generic and designated a separate entity responsible for sanitizing the secrets. This shift allowed the Warrior Pool to focus more on the pooling process and invoke various types of sanitizers without requiring knowledge of their specific workings. As part of their improvement efforts, the Warrior Pool also decided to shift the sanitation process to occur when an image is assigned to the pool, rather than when it is required. This change aimed to increase availability and streamline the overall workflow. There were still many places where anonymous practice of creating classes were being used. For example; Java Clan wants to handle the situation when a warrior is feeling overwhelmed during training. 1234567Emotion. OVERWHELMED {  @Override  public void handleSituation() {    // Handle situation for overwhelmed emotion    System. out. println( Take a moment to breathe and regain focus.  );  }}. handleSituation();If you don’t know, anonymous classes are useful in situations where you need to create a class that has a specific implementation for a single-use scenario. They are commonly used when you need to override a method or provide a unique implementation for a particular behavior or to introduce additional methods or fields within the context of the anonymous class.  If you need to create multiple instances of a class or require access to its constructor, a local class might be more appropriate You can freely create a local class for the same functionality. But as Java suggest to maintain the correct hierarchy and encapsulation, a local class which have no other use than to be used in a method for single time purpose, can be created as anonymous class. Once, you realize that the functionality you implemented in anonymous class can be reused on different places then you can separate the code and make a local class. Be GenericPo was given the responsibility to manage the library. The library that Po was entrusted with was a grand structure nestled in the heart of the village. Its towering walls were adorned with intricate carvings depicting scenes of ancient battles and wise sages imparting their knowledge. The entrance, guarded by stone lions, led to a vast hall filled with shelves upon shelves of books, scrolls, and manuscripts. At the heart of the library lay the restricted section, a chamber shrouded in an air of mystery. Here, the most treasured and delicate scrolls were kept, representing the ancient martial arts techniques that had been passed down through generations. The room was dimly lit, with soft rays of sunlight filtering through stained glass windows, casting colorful patterns on the polished wooden floors. It was within this sacred space that Po’s friends, the village warriors and scholars, gathered to discuss their dreams and aspirations. They saw in Po a kindred spirit, someone with a passion for knowledge and a burning desire to leave his mark on the world. Encouraged by their unwavering support, they convinced Po that he had the potential to become a great master by contributing his own literature to the library.  With their words echoing in his mind, Po felt a surge of determination coursing through his veins. He imagined himself standing amongst the ancient scrolls, sharing his wisdom and insights with future generations. The thought of leaving a lasting legacy, a testament to his growth and understanding, inspired him to embark on this ambitious journey. But the road to becoming a great master was not without its challenges. Doubts crept into Po’s mind, whispering tales of inadequacy and fear of failure. It was during these moments of uncertainty that his friends became his pillars of support, reminding him of his unique perspective and the value he could bring to the library.  One day, after hours of contemplation, Po’s mind was buzzing with excitement. He had come up with a brilliant idea to contribute to the library. Determined to make it a reality, he woke up early in the morning, the sun barely peeking over the horizon. The village was still shrouded in a hazy mist, and the air was filled with the aroma of freshly brewed tea. Po quietly slipped out of his bed, careful not to disturb his sleeping companions. With a sense of purpose in his heart, he made his way to his father’s noodle shop. The door creaked open, and Po found his father, Mr. Ping, already hard at work, kneading the dough and preparing the ingredients for the day’s noodles.  As Po approached his father, a mischievous glimmer danced in his eyes. He knew that convincing Mr. Ping to share the secret recipe of his famous noodles would not be an easy task. Po rolled up his sleeves and jumped into action, offering his assistance in any way he could. With each chop of vegetables and stir of the simmering broth, Po’s determination grew stronger. The villagers, still rubbing the sleep from their eyes, began to notice Po’s unusual behavior. Whispers spread through the village as they wondered why the young panda was so eager to help his father. Some speculated that he had stumbled upon a hidden treasure, while others believed he had fallen in love with a mysterious stranger. The curiosity surrounding Po’s early morning activities added an extra layer of intrigue to the tale. Day after day, Po continued to wake up early, working side by side with his father. The villagers couldn’t help but be captivated by the dedication and passion that emanated from the noodle shop. They marveled at the aroma of the noodles that wafted through the air, tempting their taste buds and drawing them closer to the shop. As Po’s relationship with his father blossomed, so did his understanding of the secret recipe. Mr. Ping, impressed by his son’s unwavering commitment, decided it was time to pass down the closely guarded knowledge. Together, they perfected the art of noodle-making, infusing each strand with love, tradition, and a touch of magic. With the secret recipe in his possession, Po felt a surge of confidence as he embarked on his journey to the library. Little did he know that his adventure was about to take an unexpected turn. Time was passing quickly, and it was Po’s last day in the library. He hastily wrote down the secret noodle recipe and rushed to the library to submit his scroll before closing time. Master Shifu, the wise guardian of the library, had a keen eye for detail and was quick to spot any inconsistencies. When Po presented his scroll to Master Shifu, the atmosphere was charged with anticipation. The room fell silent as Master Shifu unrolled the scroll, his eyes scanning the words and illustrations. Suddenly, a look of surprise crossed his face, followed by a burst of laughter. The scroll was filled with comical errors and nonsensical martial arts techniques. Po’s cheeks flushed with embarrassment as he realized his mistake. He had been so focused on the excitement of contributing to the library that he had neglected to understand the concept of type safety. He approached Master Shifu in a mild voice and asked what type safety meant. Master Shifu, though initially amused, took this opportunity to teach Po a valuable lesson. Master Shifu calmed down and gathered all the masters in the classroom. Master Shifu showed a toy with holes of different shapes on the top: square, circle, and triangle. In his other hand, he held wooden shapes. He explained to all the masters, “Even though each shape is meant to be passed through a specific hole, they can be inserted into the box through the circle hole due to improper type checking. ” 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import java. util. ArrayList;import java. util. List;class Shape {  // Common properties and methods of all shapes}class Square extends Shape {}class Circle extends Shape {}class Triangle extends Shape {}class ToyBox&lt;T&gt; {  private List&lt;T&gt; toys;  public void addToy(T toy) {    toys. add(toy);  }  public void playWithToys() {    // for (T toy : toys)  }}class Palace {  public static void main(String[] args) {    ToyBox&lt;Square&gt; squareToyBox = new ToyBox&lt;&gt;();    squareToyBox. addToy(new Square());    ToyBox&lt;Circle&gt; circleToyBox = new ToyBox&lt;&gt;();    circleToyBox. addToy(new Circle());    ToyBox&lt;Triangle&gt; triangleToyBox = new ToyBox&lt;&gt;();    triangleToyBox. addToy(new Triangle());    playWithToyBoxes(squareToyBox);    playWithToyBoxes(circleToyBox);    playWithToyBoxes(triangleToyBox);  }  public static void playWithToyBoxes(ToyBox&lt;? extends Shape&gt; toyBox) {    toyBox. playWithToys();  }  public static void insertToToyBox(ToyBox&lt;? super Circle&gt; toyBox, Circle circle) {    toyBox. addToy(circle);  }}Master Shifu, the guardian of the palace, spoke with authority, emphasizing the importance of type safety within its walls. He drew a metaphor, comparing the concept to a quiver filled with arrows. “In this palace, type safety is like a vigilant archer ensuring that the right arrows are used in the right situations,” he explained, his voice resonating with wisdom. Referring to the incident of the scroll type mismatch indirectly, Master Shifu delved into a detailed explanation of type safety. To illustrate his point, he reached into the quiver and retrieved an arrow, holding it up for everyone to see. “Each arrow is meticulously crafted for a specific purpose, be it to strike with precision or to create a non-lethal impact,” he began.  He then showcased another arrow, explaining its unique properties. “This arrow is coated with chemicals that ignite upon reaching the peak of its trajectory, generating intense heat,” he described. “And this arrow, with a hammerhead, is designed to repel enemies without causing harm. Each arrow requires a distinct bow, crafted specifically for its purpose. ” Master Shifu emphasized the significance of ensuring type safety in weaponry, drawing a parallel to the need for proper usage of programming constructs. “Just as a bow must be matched with the appropriate arrow, it is essential to maintain type safety in programming, ensuring that each component is correctly utilized at the right time,” he concluded, leaving a lasting impression on Po and his fellow learners. The metaphor of arrows and bows served as a vivid representation of the consequences that could arise from neglecting type safety. It conveyed the importance of understanding and adhering to the principles of type safety, protecting against potential errors and ensuring the smooth functioning of programs, just as the archer safeguards the integrity of their arsenal.  📌 Info  The JRE leverages type safety for performance optimizations by eliminating unnecessary type checks during runtime. What do you think? Am I talking about Po or Tigress or someone new? 	     Master Shifu is teaching a secret martial skill to ___. Through rigorous training and discipline, __ will master this technique and become a formidable warrior. With __ dedication and determination, success is inevitable.   Actually it doesn’t matter if you fill in “Po” or “Tigress” in all three blanks, the sentence will still make sense. Using Po: Master Shifu is teaching a secret martial skill to Po. Through rigorous training and discipline, Po will master this technique and become a formidable warrior. With Po’s dedication and determination, success is inevitable. Using Tigress: Master Shifu is teaching a secret martial skill to Tigress. Through rigorous training and discipline, Tigress will master this technique and become a formidable warrior. With Tigress’s dedication and determination, success is inevitable. This is how Generics work. For an example, consider a cross training module where a master can teach other master with his skills. 123456789101112131415class Trainer&lt;T extends Master&gt; {  private List&lt;T&gt; trainers;  public void addTrainer(T trainer) {    trainers. add(trainer);  }  public void train(T master) {    // Training logic goes here    System. out. println( Training   + master. getClass(). getSimpleName());    for (T trainer : trainers) {      System. out. println( Trained by   + trainer. getClass(). getSimpleName());    }  }}Now suppose I want to ensure that Po and Tigress can teach each other. Master Shifu can teach both but they’re not teaching Master Shifu; 12345for (T trainer : trainers) {	if (!trainer. getClass(). isAssignableFrom(master. getClass())) {		System. out. println( Trained by   + trainer. getClass(). getSimpleName());	}}All the masters must be ready for the battle, and it can happen only when all help each other. Some generic weapons and generic strategy might be useful in the battle field. Hope! we’ll win the battle. I tried to cover the concepts or rather need of nested classes, Enum, anonymous classes, and generics through the story of KungFu Java. Some of the topics may need more depth to understand their use. However, I was more focused to explain their need. This article is basically for absolute beginners or for entertainment purpose. "
    }, {
    "id": 29,
    "url": "https://solothought.com/tutorial/kungfu-java-concepts-explanation/",
    "title": "Story of Kungfu Java Valley - Explanation",
    "body": "2023/06/27 - In the last article, The story of Kungfu Java Valley , we read about Java Valley and how Po became Master Po. There were many Java concepts we already read in that article. In this article, we’ll focus more on the technical side and reveal remaining hidden Java concepts. I’ll extend the story in the next article to understand more concepts. I hope you’ll enjoy it. Abstract Class: Master Oogway – the wise old turtle, is an abstract class who has an abstract method fight. Every master has to find their techniques to fight. In Java, an abstract method needs to be implemented compulsorily by the sub-classes (notice that I didn’t use the word “child” for sub-class). If a sub-class doesn’t want to implement an abstract method, it can also declare the method as abstract so it’s sub-classes can implement them. But in this case, it also needs to be abstract. Instance reference: Though Master Oogway wants their type to develop fighting skill, he never fights himself. Hence, no one can request him to create his images or instances (you can consider it a child). This is the same as we can’t instantiate an abstract class in Java. However, a newly trained master may take the reference of his master or master of master for initial fightings until he gains some confidence. 1Oogway ninjaTurtle = new Po(); //Referenced by master classThis is not only to gain confidence, but it’s always good if the master is used as a reference and use the skills of any student as per need. Eg Po can use his skills to defeat the enemy and Tigress can use her skills. But Master Shifu can use skills of both; 12Shifu fighter = new Po();Po fighter = new Shifu(); //Not allowed 📌 Info  A student can’t be a reference for his master When we write a post on a blog, we define categories and tags. These are the markers to group particular type of posts. Though they define the type of post, they are still marker not the class. A post is a type of blog-page. A blog-page can be a type of web-page and so on.  📌 Info  I use “marker” in most of the places in this article to “Interface”. Interface: A marker can have some default implementation of instructions to reduce the work overload on new Masters or masters with different skill. For example, some masters are the warrior but some are the teacher of secret skills. There are people in the temple who are not even the master but they help to manage other work of the temple. Sometimes, in their absence, suppose an invigilator, a master who is marked as an invigilator as well, can give extra hands if available. These masters need not to be specialized and can cope with default skills already defined by Marker. Same as Java interface may have a default implementation of a method.  The person who is in-charge of villager training might be surprised when he saw a warrior image (or instance) to perform the duty of invigilator. Without going in the complexity of a warrior, the in-charge person can use the expected skill of invigilator given by the Marker. But this is possible only if this skill is public. Hence, Java interface methods are supposed to be public. The all other methods which are private are just the supporter methods for default implementation. 123456789101112interface Invigilator {  private void checkId() {}  private void checkAttendance() {}  default void startExam() {    checkId();    checkAttendance();    System. out. println( Starting exam. . .  );  }}:Invigilator nonExperinced = new Tigress(); // Tigress implements Invigilator Interface vs Abstract class: This is worth noticing that Oogway represents a class of his own type. Since he is abstract, he can instruct his types (sub-classes) to implement some mandatory skills just like a Marker (or Interface) does. But if he will provide the default implementation of the mandatory skill then the other master may ignore the importance of the mandatory skill they should develop. Hence, in Java, markers support default implementation for a method a class should implement but an abstract class doesn’t. However, there can be some skills a master class has and a type class can override it. 12345678910111213141516171819202122232425262728293031abstract class Oogway {  public void reducePressure(){    System. out. println( Meditate );  }}class Shifu extends Oogway {  public void reducePressure(){    System. out. println( Balance on toe );  }}class Po extends Shifu {  public void reducePressure(){    System. out. println( Eat momos!! );  }}public class Main {  public static void main(String[] args) {    Oogway firstTimeFighter = new Po();    firstTimeFighter. reducePressure(); //  Eat momos!!         Shifu secondTimeFighter = new Po();    secondTimeFighter. reducePressure(); //  Eat momos!!         Shifu experiencedFighter = new Shifu();    experiencedFighter. reducePressure(); //  Balance on toe   }}It’s obvious that some of the villagers are confused between the importance of being abstract or marker. Are you one of the villagers!? 😂 Let me take a chance to clear up that confusion. A marker (or interface) can be considered a lightweight abstract solution. An image of some master can play multiple roles due to the markers. Since a marker is a light-weight solution, it can’t be instantiated but can be used as reference purposes only. Since they can’t be instantiated, they can’t have instance variables and the variables they have are supposed to be public, static and final. Because without public, they can’t be used. Without static, they can’t be used as no instance. Without final, their state can be changed but the state will be changed which can cause inconsistency. So an interface creates very less memory footprint. Note that the methods implemented in an interface can create instance variables.  Using public, static, final keywords with the variable in an Interface is optional. The importance of abstract class: A master with a marker seems similar to an abstract master. But there are some meaningful differences;  A master (class) with a marker (interface) can be instantiated but an abstract master can’t be. An abstract master can be considered as a guide. Or a template may be.  Since an abstract class is like a concrete class without the ability to be instantiated, a method can even an abstract method too. This is how the template pattern is implemented;1234567891011121314151617181920212223242526272829303132333435363738abstract class Oogway {  public abstract boolean साम();  public abstract boolean दाम();  public abstract boolean दन्ड();	public abstract boolean भेद​();  public boolean protectTheTemple() {    if(!साम() &amp;&amp; !दाम() &amp;&amp; !दन्ड() &amp;&amp; !भेद()); return false else return true;  }}abstract class Shifu extends Oogway {	public boolean साम(){		return true;	}  public abstract boolean दाम();  public boolean दन्ड(){	  return true;  }	public abstract boolean भेद​();}class TaiLung extends Shifu {	public boolean दाम(){		return true;	}	public boolean भेद​(){		return true;	}}public class BattelField{	public static void main(String[] args) {		Oogway fighter = new TaiLung();		System. out. println(fighter. protectTheTemple());	}}   In above example, I used unicode just for an example. But Java supports unicode in String value from Java 12. In other words, we can say that when Oogway can fight with the skills of Tai Lung, Oogway is abstract. Interface default methods: It doesn’t matter If there are 2 markers having a common method because the skill implemented by a master is supposed to be used further. But if more than 1 marker has a default method then the master can’t ignore it as it will create confusion. So the master is supposed to implement the skill otherwise the battle, I mean your application will not even start. 1234567891011121314151617interface PhonixFire {  public default void fly() {    System. out. println( I'm flying! );  }}interface EagalEye {  public default void fly() {    System. out. println( I fly high );  }}interface Po implements PhonixFire, EagalEye{  public default void fly() {    System. out. println( I afraid to fly but will learn to ride the weapon which can fly );  }}Remember that if Master Shifu is marked as Trainer, Po doesn’t become trainer automatically. Po also need to be marked as Trainer explicitly. Means Po needs to implement Trainer interface. Shadowing: In the last article, Master Shifu explained Po with the metaphor of lanterns that if a sub-type declares a variable with the same name his master used, then the value of sub-type will shadow the value of master. 1234567891011121314151617181920212223242526272829303132class Master{  final int x= 10;  static int y= 10;  int z= 10;}class Subtype extends Master{  int x= 20;  static int y= 20;  int z= 20;}public class Main {  public static void main(String[] args) throws Exception {        Master a = new Master();    System. out. println(a. x);//10    System. out. println(a. y);//10    System. out. println(a. z);//10       Subtype b = new Subtype();    System. out. println(b. x);//20    System. out. println(b. y);//20    System. out. println(b. z);//20       Master c = new Subtype();    System. out. println(c. x);//10    System. out. println(c. y);//10    System. out. println(c. z);//10  }}In Java, when a subclass declares a variable with the same name as a variable in its superclass, the subclass variable “hides” or shadows the superclass variable. This means that when accessing the variable through a reference of the superclass type, the superclass variable will be used, regardless of the actual object’s type. Dynamic method dispatch or late binding: But there is a twist; If you use a reference of the Master class but call a method of the Subtype class that uses the variables, the method will still use the variables of the Subtype class. This behavior is determined at runtime and is known as dynamic method dispatch or late binding. 12345678910111213141516171819202122232425262728293031class Master {  final int x = 10;  static int y = 10;  int z = 10;    public void printVariables() {    System. out. println(x);    System. out. println(y);    System. out. println(z);  }}class Subtype extends Master {  int x = 20;  static int y = 20;  int z = 20;  @Override  public void printVariables() {    System. out. println(x);    System. out. println(y);    System. out. println(z);  }}public class Main {  public static void main(String[] args) throws Exception {    Master c = new Subtype();    c. printVariables(); // Calls the overridden method in Subtype  }}Output 123202020Note that we’re not using printVariables of Master class in above example but still declared it as we’re calling printVariables using the reference of Master class. Thought printVariables of Subtype would be called but if printVariables is not present in Master class then it’ll throw error at runtime: error: cannot find symbol.  📌 Info  When you use Master class as reference, all the methods and variables that you call via the reference variable must present in master class. Method Overriding and shadowing:  A static method can be shadowed by the subtype A final method can’t be overriden. Hence, gives error Normal methods are overriden by subtype1234567891011121314151617181920212223242526class Master {  static int m() {return 10;}   int m1() {return 10;}}class Subtype extends Master {  static int m() {return 20;}   int m1() {return 20;}}public class Main {  public static void main(String[] args) throws Exception {    Master a = new Master();    Subtype b = new Subtype();    Master c = new Subtype();    c. printVariables(); // Calls the method of Subtype class    System. out. println(a. m()); //10    System. out. println(b. m()); //20 //Shadowing    System. out. println(c. m()); //10     System. out. println(a. m1()); //10    System. out. println(b. m1()); //20 //Overriding    System. out. println(c. m1()); //20 //Overriding  }}In easy words, you can say overriding is a kind of shadowing that happens when child class implement the same method of parent class. 12345678public class ShadowingExample {  private int num = 10; // Class-level variable  public void shadowMethod() {    int num = 20; // Local variable shadowing the class-level variable    System. out. println( Local variable num:   + num); // Prints the value of the local variable  }}I hope I have covered all the concepts. I explained in the original story. "
    }, {
    "id": 30,
    "url": "https://solothought.com/tutorial/kungfu-java-concepts/",
    "title": "Story of Kungfu Java Valley",
    "body": "2023/06/24 - Once upon a time, in the mystical land of Java, there existed a wise and powerful creature known as Master Oogway. He was no ordinary being but an abstract class, revered as the commander and the master of all warriors, including Master Shifu. Each master possessed secret skills, represented by private skills and weapon, which were known only to them. However, there were certain skills that they were willing to share with those who aspired to follow in their footsteps. These special skills were protected and accessible only to their students. Master Oogway, being the epitome of tranquillity, held the private skill of attaining inner calm. In addition, he entrusted Master Shifu with a protected skill, teaching him the art of saving the temple from any threat. Under Master Oogway’s guidance, Master Shifu honed his abilities and trained diligently, preparing to face any challenges that came his way. Each master possessed secret skills that were passed down through generations.  Master Oogway, with his deep understanding of the universe, had mastered the art of harnessing the power of chi. This secret skill allowed him to achieve a state of calmness and centeredness, even in the face of adversity. He kept this skill private, sharing it only with his most trusted students. On the other hand, Master Shifu, a disciplined and dedicated student, had developed his own secret skill. He had mastered the art of using pressure points in combat, enabling him to defeat opponents with precision and efficiency. This skill was protected and passed down only to his most promising students. 1234567891011121314151617181920212223242526abstract class Oogway {  private String Calmness; //skill  private String SoloThought; //skill  protected String PhoenixBlade;	abstract public void fight();}class Shifu extends Oogway {	private List&lt;String&gt; pressurePoints;	public void fight(){		System. out. println( Defeat with:   + pressurePoints);	}	public void fight(String level){		if(level. equals( final )) System. out. println( Using protected weapon:   + PhoenixBlade);	}}public class Main {  public static void main(String[] args) {    Shifu shifu = new Shifu();    shifu. fight();    shifu. fight( final );  }}In their world, the masters possessed a unique magic that allowed them to create virtual images, or instances, of themselves. These images were sent into battle to protect the village and its inhabitants. Any villager in need could request the masters to create an image and accompany them in their quest to safeguard the village. However, Master Shifu possessed some static skills like the ability to open the gate of the temple effortlessly. He doesn’t need any of his images to do the same.  To prevent malevolent warriors, such as the infamous Kai, from harnessing their powers, both Master Oogway and Master Shifu sealed their skills securely. They were well aware of the potential dangers that could arise if their knowledge fell into the wrong hands. Additionally, both masters were marked as Temple Savers, an honorable position signifying their commitment to protecting the sacred grounds. 123456789101112131415sealed class Oogway permits Shifu {  // properties and methods of Oogway class}sealed class Shifu permits Po, Tigress {  // properties and methods of Shifu class}class Po extends Shifu {  // properties and methods of Po class}class Tigress extends Shifu {  // properties and methods of Tigress class}Every Monday, villagers flocked to the temple seeking the guidance and training of the masters. Regardless of who was present, any master bearing the Village Trainer interface was capable of providing instruction. The training modules implemented polymorphism, not concerning themselves with the specific identity of the master. As long as they possessed the necessary qualifications, any master could impart their wisdom. Just like polymorphism, allowed different masters to train the villagers or other master who is recognized as a trainee. 123456789101112131415161718192021222324252627282930313233abstract sealed class Oogway permits Shifu {  public void train() {    System. out. println( Oogway is training );  }}sealed class Shifu permits Po, Tigress implements Trainer{  public void train() {    System. out. println( Shifu is training );  }}interface Trainer {  default void train(Trainee trainee) {    trainee. train();  }}interface Trainee {}class Po extends Shifu implements Trainer, Trainee {}public class TrainingScheduler {	List&lt;Trainer&gt; trainers;	List&lt;Trainee&gt; trainees;	Map&lt;Trainer,Trainee&gt; schedule; 	public void schedule(){		//for each trainee in trainees		// pick a trainer from trainers randomly		// assign a trainer to trainee and save the schedule	}}One fateful day, a simple panda stumbled upon the temple. His eyes widened in awe as he spotted Master Shifu deep in meditation. The panda had long admired the master from afar and approached him with a humble request—to become a master like him. At first, Master Shifu hesitated, unsure if the panda had what it took to walk the path of a master. Yet, the panda’s unwavering determination and numerous attempts to convince him eventually persuaded Master Shifu to accept his request. He set one condition: the panda must become the final inheritor of his skills, unlike the non-sealed masters before him.  As the panda progressed in his training, he faced numerous challenges and obstacles. He had to prove his worthiness by going through intense combat sessions, mastering meditation techniques, and demonstrating his commitment to protecting the temple. Through his determination and hard work, the panda eventually became a master, inheriting the secret skills of Master Shifu.  Meanwhile, a powerful enemy threatened the village and the temple. The masters realized that they needed to train the villagers to defend themselves. The panda, now a master, took on the responsibility of training the villagers, using the skills he had learned from Master Shifu. The village united under the guidance of the masters and successfully defended their home. In the end, the temple remained a symbol of strength and resilience. The panda, now a respected master, continued to train future generations, passing down the ancient knowledge and skills that had been entrusted to him. This story showcases the importance of mentorship, dedication, and the power of perseverance. It highlights the concept of polymorphism, where different masters can train individuals as long as they possess the necessary skills and knowledge. It also emphasizes the significance of protecting valuable traditions and passing them down to future generations. ” As the panda continued his training under the guidance of Master Shifu, he learned about the concept of non-changeable skills and weapons, known as the final. His images can use them as it is. Even the maters of Panda type can’t change how those weapons work. With the permission of Master Shifu, Po finally removed the final from his type so he can make masters of his type. 1234567class Po extends Shifu {  final String secretSauce =  AX87DF89E3 ;  final void momoBlast() {    System. out. println( Fire the momo blast! );  }}During one eventful day, Master Shifu presented a final green-stone to the panda. This unique stone possessed a special power to freeze the enemy power for sometime. Intrigued, the panda decided to create a “green-stone” of his own to experiment and develop a new weapon similar to the one Master Shifu possessed. However, an unexpected interruption occurred when some villagers approached the panda, requesting his assistance in fighting against their enemies. Unfortunately, the panda forgot to remove the weapon he had recently created and inadvertently shared his image with the villagers.  Though villagers somehow won the fight, he got to know that “great-stone” didn’t work at all. He was surprised as Master Shifu himself showed his power to him. He went to Master Shifu to know why it failed in the war field. 1234567891011121314151617class Shifu {  //Uncomment any line you want, output will not change  protected final String greenStone =  green-stone ;  // protected String greenStone =  green-stone ;  // final String greenStone =  green-stone ;}class Po extends Shifu {  String greenStone =  po-green-stone ;}public class Main {  public static void main(String[] args) {    Po po = new Po();    System. out. println(po. greenStone); // po-green-stone  }}Master Shifu used a metaphor to explain this concept. He said, “Imagine that our final weapons are like two lanterns shining their light. When we have the same name for our weapons, it’s like placing one lantern directly in front of the other. The light from the first lantern will be hidden, and only the light from the second lantern will be visible. ”. He immediately realised his mistake of not erasing the weapon he created just for the experiment before making sharing his image with the villagers. Master Shifu advised the panda to choose a different name for his weapon to prevent any conflicts. He named it “light-green-stone”. Both clutched their stomachs and erupted in laughter, seemingly oblivious to anyone observing them.  No matter what speciality your master had. If you have something that your master also had, people will see you first. Because you’re concrete.  The Palace managed by Master Shifu can be considered as a Java microservice. It is the only palace on Jade Mountain and functions independently without being dependent on other temples. The Palace serves as a self-contained unit, providing specific services to its visitors. To manage the increasing workload of the Temple, a new library is created as a sub-unit or module within the Palace. The library operates as an independent entity, handling specific tasks and responsibilities. Despite being a part of the Temple, the library has its own separate functionality and can be accessed and utilized by villagers and another modules of the palace independently. In the context of Java, modules are a way to organize and encapsulate code. They allow for the separation of concerns and provide a modular structure to the application. Each module can have its own set of functionalities and dependencies. It provides a clear boundary for code ownership and enables different teams to work on different modules independently. A module can be considered as an independent microservice that is tightly coupled with a service but can work independently. A module can also be created when a micro-service is utilize the same resources and technology stack and has some meaning to be the part of same project.  ⚠️ Warning  In this article, inheritance is considered as a type relationship not as a “parent-child” relationship. Think in this way, Human class is inherited by Superman class. But Superman is not the child of the human but it is the type of Human. In the next article, I’ll explain to you all the Java concepts covered in this article. So bookmark this article. Have any thoughts to improve this article, correct the concepts and cover more concepts? Then share your thoughts. "
    }, {
    "id": 31,
    "url": "https://solothought.com/tutorial/fast-xml-parser-4.2-features/",
    "title": "Fast XML Parser v4.2 Features",
    "body": "2023/04/09 - Fast XML Parser was initially developed to support npm package Stubmatic which is used for the rapid development of mock web services. Now Fast XML Parser has more than 9 million weekly downloads and approximately half a million projects on GitHub are using it including Microsoft, IBM, AWS, and many other big companies. In this post, we’ll talk about new features launched in V4. 1. 4 and v4. 2. 0  📌 Info  Use oneListGroup property to guide builder not to generate separate parent tag for each child of a list. Use updateTag method with parer to update attrbutes name, attributes values, and tag name. You can also skip a tag from parsing result. oneListGroup for XML builder: Ideally there is no group needed in XML for repetitive tags. But having it may make more sense to understand the data. 1234567891011121314151617Addresses: [  {    Address: {      line1:         line2:         line3:         city&gt;:       }  },{    Address: {      line1:         line2:         line3:         city&gt;:       }  }]XML Builder was previously enclosing each Address in Addresses tag separately before v4. 1. 4. Now, if you set oneListGroup: true as an option to Builder it makes only one group same as in the above JSON. 12345const builder = new XMLBuilder({    oneListGroup: true ,    format: true  });const result = builder. build(jObj);Output 1234567891011121314&lt;Addresses&gt;  &lt;Address&gt;    &lt;line1&gt;&lt;/line1&gt;    &lt;line2&gt;&lt;/line2&gt;    &lt;line3&gt;&lt;/line3&gt;    &lt;city&gt;&lt;/city&gt;  &lt;/Address&gt;  &lt;Address&gt;    &lt;line1&gt;&lt;/line1&gt;    &lt;line2&gt;&lt;/line2&gt;    &lt;line3&gt;&lt;/line3&gt;    &lt;city&gt;&lt;/city&gt;  &lt;/Address&gt;&lt;/Addresses&gt;Change Attributes:     Note: This feature is currently added to the XML parser only. Sometimes incoming XML doesn’t fit to our expectations. We may want to skip a few attributes of a tag from the parsing result. Sometimes we want to aggregate all the attributes in one or just change the value or name of some attributes. updateTag method in parser’s option gives the independency to manage attributes in your way. Input 1234567&lt;root&gt;  &lt;a keep= me  skip= me &gt;&lt;/a&gt;  &lt;a skip= me &gt;&lt;/a&gt;  &lt;a need= friend &gt;&lt;/a&gt;  &lt;a camel= case  MakeMe= lower &gt;&lt;/a&gt;  &lt;b change= val &gt;&lt;/b&gt;&lt;/root&gt;Code 12345678910111213141516171819202122232425const options = {  attributeNamePrefix:   ,  ignoreAttributes:  false,  updateTag(tagName, jPath, attrs){    if(attrs[ skip ]) delete attrs[ skip ]    if(attrs[ camel ]) {      attrs[ Camel ] = attrs[ camel ];      delete attrs[ camel ];    }    if(attrs[ need ]) {      attrs[ friend ] =  me ;    }    if(attrs[ MakeMe ]) {      attrs[ makeme ] = attrs[ MakeMe ];      delete attrs[ MakeMe ];    }    if(attrs[ change ]) {      attrs[ change ] = attrs[ change ]. toUpperCase();    }    return tagName;  }};const parser = new XMLParser(options);let result = parser. parse(xmlData);Output 123456789101112131415161718192021{   root : {     a : [      {         keep :  me       },        ,      {         need :  friend ,         friend :  me       },      {         Camel :  case ,         makeme :  lower       }    ],     b : {       change :  VAL     }  }}    Note: Please remember that `ignoreAttributes: false` is setChange Tag name or skip a tag: Though updateTag doesn’t give you full control to manage tag but you can change tag name or skip a tag from the parsing result. Suppose, you’re parsing a HTML document and want to skip all the script tags or you want to change the name of a tag when it is not properly formatted. You may also conditionally skip a tag like to skip img tag for big images. Input 1234567891011121314&lt;html&gt;  &lt;header&gt;&lt;/header&gt;  &lt;body&gt;    &lt;h1 class= highlight  &gt;Post title&lt;/h1&gt;    &lt;content&gt;      &lt;img width= 200  height= 500 &gt;      &lt;p&gt;some text&lt;/p&gt;      &lt;img width= 200  height= 200 &gt;      &lt;p join= a  all= b  in= c  one= d  &gt;some text 2&lt;/p&gt;      &lt;img width= 500  height= 500 &gt;    &lt;/content&gt;    &lt;script&gt;&lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;Code 123456789101112131415161718192021222324252627const options = {  ignoreAttributes: false,  attributeNamePrefix:   ,  updateTag: function(tagname, jPath, attrs){        if(tagname === h1  &amp;&amp; attrs[ class ] &amp;&amp; attrs[ class ]. indexOf( highlight ) &gt; -1){      attrs[ class ] +=   underline     }else if(attrs[ join ]){      let val =   ;      Object. keys(attrs). forEach( a =&gt; {        val+= attrs[a]        delete attrs[a];      });      attrs[ joint ] = val;    }    if(tagname ===  script ) return false;    else if(tagname ===  img ){      if(attrs. width &gt; 200 || attrs. height &gt; 200) return false;    }else if(tagname ===  content ){      return  div     }    return tagname;  },  unpairedTags: [ img ]};const parser = new XMLParser(options);let result = parser. parse(xmlData);Output 123456789101112131415161718192021222324{   html : {     header :   ,     body : {       h1 : {         #text :  Post title ,         class :  highlight underline       },       div : {         p : [           some text ,          {             #text :  some text 2 ,             joint :  abcd           }        ],         img : {           width :  200 ,           height :  200         }      }    }  }}"
    }, {
    "id": 32,
    "url": "https://solothought.com/tutorial/setup-jekyll-vscode-container/",
    "title": "Setup Jekyll Vscode Dev Container",
    "body": "2023/04/02 - This is a quick guide to setup Jekyll environment for jekyll theme development or to write blog posts locally. You can download ready-to-use source-code from Github.     1Setup your machine  Please ensure that following dependencies are present on your machine      Docker   Git   Vscode with following extensions         Dev containers     Remote Development     Remote Explorer     Remote Tunnels              2Jekyll Dev container  Clone jekyll dev-container repository or download it from Github.   1$ git clone git@github. com:solothought/jekyll-vscode-devcontainer. git solothought-jekyll-vscode-devcontainer    Click on green icon in left-bottom corner of vscode &gt; select Reopen in Container. It will be download and install some necessary packages on first run.   Go to view menu &gt; Select Terminal option. Or Ctrl+`. This will open Terminal inside the jekyll container. You’ll see 2 ports open. But you can’t still open the site as no theme is generated or set yet.   Click on + icon to create a new theme or to explore what is inside the container.   Here, you can run jekyll commands      jekyll clean   jekyll new   jekyll build   jekyll serve       3Jekyll Theme  You can create a base theme your own or download a theme of your choice.   123456789101112131415vscode ➜ /workspaces/solothought-jekyll-vscode-devcontainer (main) $ jekyll new solothoughtRunning bundle install in /workspaces/solothought-jekyll-vscode-devcontainer/solothought. . .  Bundler: Fetching gem metadata from https://rubygems. org/. . . . . . . . . . . .  Bundler: Resolving dependencies. . .  Bundler: Using public_suffix 5. 0. 1 Bundler: Using bundler 2. 4. 7 Bundler: Using colorator 1. 1. 0 Bundler: Using concurrent-ruby 1. 2. 2 Bundler: Using eventmachine 1. 2. 7 Bundler: Using ffi 1. 15. 5 . . .  Bundler: Bundle complete! 7 Gemfile dependencies, 33 gems now installed.  Bundler: Use `bundle info [gemname]` to see where a bundled gem is installed. New jekyll site installed in /workspaces/solothought-jekyll-vscode-devcontainer/solothought. vscode ➜ /workspaces/solothought-jekyll-vscode-devcontainer (main) $    This will create a theme folder solothought in project directory.   123456789101112  . . .   ├── . devcontainer  ├── . vscode  ├── solothought    └── _posts    └── _drafts    └── _site    └── _config. yml    └── 404. html    └── Gemfile    └── Gemfile. lock    └── index. markdown    Go inside the folder and build it.   1234567vscode ➜ /workspaces/solothought-jekyll-vscode-devcontainer (main) $ cd solothought/vscode ➜ /workspaces/solothought-jekyll-vscode-devcontainer/solothought (main) $ jekyll serve. . .           done in 0. 431 seconds. Auto-regeneration: enabled for '/workspaces/solothought-jekyll-vscode-devcontainer/solothought'  Server address: http://127. 0. 0. 1:4000/ Server running. . . press ctrl-c to stop.     Open http://127. 0. 0. 1:4000/ in the browser to check how it look.      Note: If you're downloading a theme from somewhere else then delete `Gemfile. lock` file before building theme as it might be pointing to some old dependenciesInstead of typing a command manually, you can also run vscode task. Go to Terminal &gt; Run Task &gt; Select the relevant task. You can find all the tasks in . vscode\tasks. json. Since, we have genrated the theme in a different folder instead of project root, you’ll have to uncomment cwd option in tasks. json so the Jekyll commands run from the correct directory. 123456789101112{   label :  Serve ,   type :  shell ,   command :  bundle exec jekyll serve --livereload ,   group : {     kind :  test   },  //  options : {  //    cwd :  ${workspaceFolder}/solothought   // },   isBackground : true,}"
    }, {
    "id": 33,
    "url": "https://solothought.com/tutorial/better-seo-url/",
    "title": "Make a Better SEO URL",
    "body": "2023/04/01 - URLs are an important factor in SEO, but many websites fall short when it comes to optimizing them for search engines. This post will explain all the variables that can affect your site’s searchability as a result of a poor URL.    No Special Characters: Processing issues can arise when a URL contains special characters or Unicode other than numerals, English alphabets, and hyphens. Because an emoji can be used in many different contexts and cannot be typed from a keyboard, a URL containing one may not appear in search engine results. Any other character which has no textual sense but is used to just decorate a post title, like [,],(,) should be avoided. Characters like @, #, &amp;, ` `(space) can cause issues to interpret a URL.     Don’t change it: We improve post contents multiple times to make them updated with the latest information or to correct errors. It may lead to a change in the post title hence the URL. If a post URL is very specific, it is a higher chance to get modified in the future. For instance, if you write about “Top 3 Sites for Typography” and found a more after few months then you may want to update the same article than write a new one. The title may change to “Top 4 sites for Typography”.   URLs can be bookmarked in browsers, cached by search engines, and referred by other sites. Sometimes you even share it on social media platforms. If the URL gets changed, it’ll result in broken links.    All hates long URL: Whether it is a search engine or a social media platform, all shorten the long URLs. Either they are replaced with another URL with some random string or cut some part to make them unreadable.     Dates can make your post old: Once you publish an article with the date in URLs, you don’t change the publish date when you update the content. Otherwise, any change in the URL will result in broken links. Many of us used to search for the latest content. So the URLs with older dates are automatically filtered out even if they’re recently updated.    Post URL ≠ Post Title: An attractive post title may increase traffic to the site. But a post URL is just a link referred by search engines and other sites. It should be short with necessary SEO friendly keywords without page extensions or propositions.      Post URL ≠ Post Title      Hierarchy: It’s difficult to manage if all the posts are stored in the top folder of a blog, especially for static sites. On the other hand, it is also not a good practice if they’re deeply nested.   https://solothought. com/tutorials/make-better-seo-url  https://solothought. com/tutorials/Web/SEO/make-better-seo-url  https://solothought. com/make-better-seo-url  You can control it by setting paramlink in jekyll, wordpress, or other frameworks.  Spam Words: URLs having keywords related to money, deals, freebies, and offers Or the URL who are creating urgency or pressure, are generally considered spam. Many search engines filter out such URLs.   https://solothought. com/a-free-tip-for-seo-url  https://solothought. com/an-urgent-advice-for-seo-url  https://solothought. com/free-copy-of-premium-ebook-on-seo-urls  "
    }];

var idx = lunr(function () {
    this.ref('id')
    this.field('title')
    this.field('body')

    documents.forEach(function (doc) {
        this.add(doc)
    }, this)
});
function lunr_search(term) {
    document.getElementById('lunrsearchresults').innerHTML = '<ul></ul>';
    if(term) {
        document.getElementById('lunrsearchresults').innerHTML = "<p>Search results for '" + term + "'</p>" + document.getElementById('lunrsearchresults').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>No results found...</li>";
        }
    }
    return false;
}

function lunr_search(term) {
    $('#lunrsearchresults').show( 400 );
    $( "body" ).addClass( "modal-open" );
    
    document.getElementById('lunrsearchresults').innerHTML = '<div id="resultsmodal" class="modal fade show d-block"  tabindex="-1" role="dialog" aria-labelledby="resultsmodal"> <div class="modal-dialog shadow-lg" role="document"> <div class="modal-content"> <div class="modal-header" id="modtit"> <button type="button" class="close" id="btnx" data-dismiss="modal" aria-label="Close"> &times; </button> </div> <div class="modal-body"> <ul class="mb-0"> </ul>    </div> <div class="modal-footer"><button id="btnx" type="button" class="btn btn-danger btn-sm" data-dismiss="modal">Close</button></div></div> </div></div>';
    if(term) {
        document.getElementById('modtit').innerHTML = "<h5 class='modal-title'>Search results for '" + term + "'</h5>" + document.getElementById('modtit').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><small><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></small></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>Sorry, no results found. Close & try a different search!</li>";
        }
    }
    return false;
}
    
$(function() {
    $("#lunrsearchresults").on('click', '#btnx', function () {
        $('#lunrsearchresults').hide( 5 );
        $( "body" ).removeClass( "modal-open" );
    });
});